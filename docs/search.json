[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/effect_distribution.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Controlling Effect Size Distributions","text":"GWASBrewer can support range effect size distributions. one end spectrum, effect sizes direct effect variants can completely deterministic. end spectrum, random. multiple ways control distributions random values demonstrated vignette.","code":""},{"path":"/articles/effect_distribution.html","id":"default-behavior","dir":"Articles","previous_headings":"","what":"Default Behavior","title":"Controlling Effect Size Distributions","text":"default behavior sim_mv sample effect variants randomly first randomly selecting direct effect variants choosing standardized effect size variants normal distribution mean zero appropriately chosen variance. Standardized effects effects units change outcome SDs per unit increase genotype SD. procedure results effect variants spread evenly throughout genome per-allele effect sizes inversely proportional \\(\\sqrt{2 f_j (1-f_j)}\\). demonstrate simulating data one trait. set \\(N = 0\\) since don’t need summary statistics demonstration. specification, expect 1000 effect variants. , plot distribution standardized per-allele effects. Note simulation, direct_SNP_effects_joint beta_joint one trait.","code":"set.seed(1) sim_dat1 <- sim_mv(G = 1,                    J = 50000,                    N = 0,                      h2 = 0.3,                     pi = 1000/50000,                     af = function(n){rbeta(n, 1, 5)}) #> SNP effects provided for 50000 SNPs and 1 traits. sum(sim_dat1$direct_SNP_effects_joint != 0) #> [1] 1004  ix <- which(sim_dat1$direct_SNP_effects_joint != 0) per_allele_effects <- sim_dat1$direct_SNP_effects_joint[ix] effect_afs <- sim_dat1$snp_info$AF[ix] std_effects <- per_allele_effects*sqrt(2*effect_afs*(1-effect_afs))  ## first plot per-allele effects hist(per_allele_effects, breaks = 30, freq = F,       main = \"Per-Allele Direct Effects\") ## next show that standardized effects are normal hist(std_effects, breaks = 30, freq = F,       main = \"Standardized Direct Effects\") curve(dnorm(x, sd = sqrt(0.3/1000)), add = T)"},{"path":"/articles/effect_distribution.html","id":"controlling-which-variants-are-effect-variants","dir":"Articles","previous_headings":"","what":"Controlling which Variants are Effect Variants","title":"Controlling Effect Size Distributions","text":"pi argument sim_mv gives probability variant effect variant. can scalar calse probability variants traits, vector giving different probability trait \\(J \\times M\\) matrix. pi matrix format pi[j,m] gives probability variant j direct effect trait m. make set direct effect variants fully deterministic, set values pi either 0 1. Using pi matrix format incompatible options pi_exact = TRUE sporadic_pleiotropy = FALSE. , use matrix format force effect variants first half genome. strategy used designate regions high concentrations effect variants assign different probabilities variants different features.  another application option, can make probability variant effect variant function allele frequency. verify observe desired effect, plot proportion effect variants bins minor allele frequency.","code":"pi_mat <- matrix(0, nrow = 50000, ncol = 1) pi_mat[1:25000,1] <- 1000/25000 sim_dat2 <- sim_mv(G = 1,                    J = 50000,                    N = 60000,                      h2 = 0.3,                     pi = pi_mat,                     af = function(n){rbeta(n, 1, 5)}) #> SNP effects provided for 50000 SNPs and 1 traits. plot(sim_dat2$direct_SNP_effects_joint) af <- rbeta(n = 50000, 1, 5) pi_mat <- matrix(0, nrow = 50000, ncol = 1) pi_mat[,1] <- (1-pmin(af, 1-af))^4 # ensure there are still 1000 effect variants expected pi_mat <- 1000*pi_mat/sum(pi_mat)  sim_dat3 <- sim_mv(G = 1,                    J = 50000,                    N = 60000,                      h2 = 0.3,                     pi = pi_mat,                     af = af) #> SNP effects provided for 50000 SNPs and 1 traits. x <- seq(0, 0.5, length.out = 100) maf <- pmin(af, 1-af) snp_dat <- data.frame(maf = maf,                        is_effect = sim_dat3$direct_SNP_effects_joint !=0,                        maf_cat = cut(maf, breaks = x),                        maf_cat_order = cut(maf, breaks = x, labels = FALSE)) %>%            group_by(maf_cat) %>%             summarize(n = n(),                       n_eff = sum(is_effect),                       maf_min = first(maf_cat_order)) %>%            mutate(eff_prob = n_eff/n) snp_dat$maf_min <- x[snp_dat$maf_min] with(snp_dat, plot(maf_min, eff_prob))"},{"path":"/articles/effect_distribution.html","id":"controlling-effect-size-distribution","dir":"Articles","previous_headings":"","what":"Controlling Effect Size Distribution","title":"Controlling Effect Size Distributions","text":"sample standardized effects distribution normal distribution, use snp_effect_function argument sim_mv. argument can accept function randomly sampling scale family distribution. function given snp_effect_function must accept three arguments, n, sd, snp_info. function called internally sim_mv. return length n vector real numbers expected sum squares sd^2. , f function, x <- f(n, sd, snp_info) x length n expected value sum(x^2) sd^2. snp_info argument allows function receive variant information allele frequency. simplest effect size functions use argument , though functions able accept . Currently, GWASBrewer test function executes test gives output approximately expected variance one test case. warning flag major errors lack warning guarantee function working correctly. sure verify ’s behavior . may see warning occasionally correctly working functions due randomness function produces effect sizes eccentric distribution.","code":""},{"path":"/articles/effect_distribution.html","id":"drawing-effects-from-a-mixture-of-normals","dir":"Articles","previous_headings":"Controlling Effect Size Distribution","what":"Drawing Effects from a Mixture of Normals","title":"Controlling Effect Size Distributions","text":"Frequently, observe pattern many effect variants small “background” effect larger “foreground” effect. pattern consistent omnigenic model genetic architecture. simulate , can draw standardized effects mixture normal distributions rather single normal distribution. helper function mixnorm_to_scale_fam generates functions appropriate pass sim_mv. example, suppose want distribution 90% variants standardized direct effects following \\(N(0, \\sigma^2_1)\\) distribution 10% standardized effects \\(N(0, 10 \\sigma^2_1)\\) distribution. can use Note sigma argument just specifies relative scaling variances equivalent use gives distribution standardized direct effects much heavier tails using default behavior.  Rather use built-helper function, gotten result using Note function heavier tails, particular example generate warning 2% time. Seeing warning doesn’t necessarily mean anything wrong. doubt, check code check resulting heritability (e.g. sim_dat4$h2) close expected heritability.","code":"myf <- mixnorm_to_scale_fam(sigma = c(1, sqrt(10)), pi = c(0.9, 0.1)) myf <- mixnorm_to_scale_fam(sigma = c(10, 10*sqrt(10)), pi = c(0.9, 0.1)) set.seed(2) sim_dat4 <- sim_mv(G = 1,                    J = 50000,                    N = 0,                      h2 = 0.3,                     pi = 5000/50000,                     snp_effect_function = myf,                    af = function(n){rbeta(n, 1, 5)}) #> SNP effects provided for 50000 SNPs and 1 traits. std_effects <- with(sim_dat4,                      direct_SNP_effects_joint*sqrt(2*snp_info$AF*(1-snp_info$AF))) hist(std_effects[!std_effects == 0], breaks = 30, freq = F,       main = \"Standardized Direct Effects\") myf <- function(n, sd, ...){   Vtarget <- sd^2 # Target sum of squares   Vbase <- sum(0.9*1 + 0.1*10)*n # base sum of squares   a <- sqrt(Vtarget/Vbase)  # scale factor   mix_sds <- a*c(1, sqrt(10))   # choose which variants are from which component   Z <- rbinom(n =n, size = 1, prob = 0.1)   x <- rep(NA, n)   x[Z == 0] <- stats::rnorm(n = sum(Z == 0), sd = mix_sds[1])   x[Z == 1] <- stats::rnorm(n = sum(Z == 1), sd = mix_sds[2])   return(x) }  ## double check that we got the scaling right x <- myf(1e5, sd = sqrt(0.2)) sum(x^2) # should be about 0.2"},{"path":"/articles/effect_distribution.html","id":"providing-a-fixed-list-of-relative-effect-sizes","dir":"Articles","previous_headings":"Controlling Effect Size Distribution","what":"Providing a fixed list of relative effect sizes","title":"Controlling Effect Size Distributions","text":"want provide specific fixed list relative variant effects, can using helper function fixed_to_scalefam. Effects still scaled give desired heritability, however relative sizes effects given fixed list, repeated many times necessary give desired number variants. example, function provides two standardized effect sizes, one twice big . realistic distribution ok example. gives us standardized effects alternate two values. Note per-allele effects take many values variation allele frequency.","code":"myf <- fixed_to_scale_fam(c(1, 2)) set.seed(2) sim_dat5 <- sim_mv(G = 1,                    J = 50000,                    N = 0,                      h2 = 0.3,                     pi = 5000/50000,                     snp_effect_function = myf,                    af = function(n){rbeta(n, 1, 5)}) #> SNP effects provided for 50000 SNPs and 1 traits. per_allele_effects <- sim_dat5$direct_SNP_effects_joint genotype_variance <- with(sim_dat5$snp_info, 2*AF*(1-AF)) std_effects <- per_allele_effects*sqrt(genotype_variance) std_effects[!std_effects == 0][1:10] #>  [1] 0.004898979 0.009797959 0.004898979 0.009797959 0.004898979 0.009797959 #>  [7] 0.004898979 0.009797959 0.004898979 0.009797959 per_allele_effects[!per_allele_effects == 0][1:10] #>  [1] 0.014672819 0.096632705 0.020872569 0.014834927 0.011288336 0.116741975 #>  [7] 0.009585994 0.013878979 0.008176130 0.020079876"},{"path":"/articles/effect_distribution.html","id":"providing-an-exact-set-of-direct-effects","dir":"Articles","previous_headings":"Controlling Effect Size Distribution","what":"Providing an Exact Set of Direct Effects","title":"Controlling Effect Size Distributions","text":"function sim_mv_determined wrapper function sim_mv allows directly specify direct effects traits variants. differences sim_mv_determined sim_mv sim_mv_determined accepts matrix direct effects plus parameters geno_scale pheno_sd indicate scale provided effects, sim_mv_determined accept parameters related distribution effect sizes. Note sim_mv_determined, G matrix gives effects phenotype scale effect sizes, indicated pheno_sd argument. sim_mv, phenotype scale always 1 (phenotypes unit variance). resulting object can translated different phenotype scale using rescale_sumstats desired. simple example using sim_mv_determined ten variants two traits. put desired direct effects matrix pass sim_mv_determined. use effects per-genotype SD scale, set geno_scale=sd.","code":"G <- matrix(c(0, 0.5, 0, 0), nrow = 2, byrow =TRUE) my_effects <- matrix(0, nrow = 10, ncol = 2) my_effects[c(1, 5),1] <- c(-0.008, 0.01) my_effects[c(3, 6, 9), 2] <- c(-0.02, 0.06, 0.009) my_effects #>         [,1]   [,2] #>  [1,] -0.008  0.000 #>  [2,]  0.000  0.000 #>  [3,]  0.000 -0.020 #>  [4,]  0.000  0.000 #>  [5,]  0.010  0.000 #>  [6,]  0.000  0.060 #>  [7,]  0.000  0.000 #>  [8,]  0.000  0.000 #>  [9,]  0.000  0.009 #> [10,]  0.000  0.000  # for fun, lets include some sample overlap N <- matrix(c(40000, 10000, 10000, 20000), nrow = 2) sim_dat6 <- sim_mv_determined(N = N,                               direct_SNP_effects_joint = my_effects,                               geno_scale = \"sd\",                               pheno_sd = 1,                               G=G,                               est_s = TRUE) #> SNP effects provided for 10 SNPs and 2 traits.  sim_dat6$direct_SNP_effects_joint #>         [,1]   [,2] #>  [1,] -0.008  0.000 #>  [2,]  0.000  0.000 #>  [3,]  0.000 -0.020 #>  [4,]  0.000  0.000 #>  [5,]  0.010  0.000 #>  [6,]  0.000  0.060 #>  [7,]  0.000  0.000 #>  [8,]  0.000  0.000 #>  [9,]  0.000  0.009 #> [10,]  0.000  0.000 sim_dat6$beta_joint #>         [,1]   [,2] #>  [1,] -0.008 -0.004 #>  [2,]  0.000  0.000 #>  [3,]  0.000 -0.020 #>  [4,]  0.000  0.000 #>  [5,]  0.010  0.005 #>  [6,]  0.000  0.060 #>  [7,]  0.000  0.000 #>  [8,]  0.000  0.000 #>  [9,]  0.000  0.009 #> [10,]  0.000  0.000 sim_dat6$Sigma_G #>          [,1]     [,2] #> [1,] 0.000164 0.000082 #> [2,] 0.000082 0.004122"},{"path":"/articles/effect_distribution.html","id":"different-effect-distributions-for-different-traits","dir":"Articles","previous_headings":"Controlling Effect Size Distribution","what":"Different effect distributions for different traits","title":"Controlling Effect Size Distributions","text":"snp_effect_function parameter can accept list length equal number traits. case, direct effect variants trait drawn corresponding element snp_effect_function. snp_effect_function list, element either acceptable function string normal use default option. code generates data two independent traits. effects first trait normally distributed. effects second trait take one two values previous section.","code":"myf <- fixed_to_scale_fam(c(1, 2)) sim_dat7 <- sim_mv(G = 2,                    J = 50000,                    N = 60000,                      h2 = 0.3,                     pi = 5000/50000,                     snp_effect_function = list('normal', myf),                    af = function(n){rbeta(n, 1, 5)}) #> SNP effects provided for 50000 SNPs and 2 traits. std_effects1 <- with(sim_dat7,                       direct_SNP_effects_joint[,1]*sqrt(2*snp_info$AF*(1-snp_info$AF))) hist(std_effects1[!std_effects1 == 0], breaks = 30, freq = F, main = \"Standardized Direct Effects Trait 1\") std_effects2 <- with(sim_dat7,                       direct_SNP_effects_joint[,2]*sqrt(2*snp_info$AF*(1-snp_info$AF))) hist(std_effects2[!std_effects2 == 0], breaks = 30, freq = F, main = \"Standardized Direct Effects Trait 2\")"},{"path":"/articles/effect_distribution.html","id":"example-using-pre-specified-effects","dir":"Articles","previous_headings":"Controlling Effect Size Distribution","what":"Example Using Pre-Specified Effects","title":"Controlling Effect Size Distributions","text":"code combines effect size specification options seen simulate GWAS data one LD block two traits. first trait two effect variants equal standardized effect size. second trait two effect variants different effect sizes. One pair variants co-localizes across traits. Simulations type used test co-localization methods. Since looking one block, set heritability block reasonable amount heritability provided two variants, 6e-4 one trait 1e-3 .    Note effects first trait specified standardized effects plotted per-allele effects. plot marginal associations observed \\(z\\)-scores data.","code":"data(\"ld_mat_list\") data(\"AF\") # Pull out sub section of one of the built in LD blocks ld_block <- ld_mat_list[[10]][118:350, 118:350] J <- nrow(ld_block) # Corresponding allele frequency start_ix <- sum(sapply(ld_mat_list[1:9], nrow)) + 118  af <- AF[start_ix:(start_ix + J-1)] ## plot the LD block as.matrix(ld_block) %>%      reshape2::melt() %>%      ggplot(aes(x = Var1, y = Var2, fill = value))  +        geom_tile() + scale_fill_gradient2() ## Select causal variants pi_mat <- matrix(0, nrow = J, ncol = 2) pi_mat[c(75, 150), 1] <- 1 pi_mat[c(75, 130), 2] <- 1  # Set effect size functions myf1 <- fixed_to_scale_fam(c(1, 1)) myf2 <- fixed_to_scale_fam(c(-1, 2))  sim_dat7 <- sim_mv(G = 2,                    J = J,                    N = 100000,                      h2 = c(6e-4, 1e-3),                     pi = pi_mat,                    R_LD = list(ld_block),                    snp_effect_function = list(myf1, myf2),                    af = af) #> SNP effects provided for 233 SNPs and 2 traits.  ## Plotting joint effects plot(sim_dat7$direct_SNP_effects_joint[,1], main = \"Trait 1 Joint Effects\", ylab = \"beta joint\") abline(v = c(75, 150)) plot(sim_dat7$direct_SNP_effects_joint[,2], main = \"Trait 2 Joint Effects\", ylab = \"beta joint\") abline(v = c(75, 130)) ## Plotting marginal effects plot(sim_dat7$direct_SNP_effects_marg[,1], main = \"Trait 1 Marginal Effects\", ylab = \"beta marg\") abline(v = c(75, 150), h = 0) plot(sim_dat7$direct_SNP_effects_marg[,2], main = \"Trait 2 Marginal Effects\", ylab = \"beta marg\") abline(v = c(75, 130), h = 0) ## Plotting observed z-scores with(sim_dat7, plot(beta_hat[,1]/se_beta_hat[,1], main = \"Trait 1 Obs. Z-scores\", ylab = \"zhat marg\")) abline(v = c(75, 150), h = 0) with(sim_dat7, plot(beta_hat[,2]/se_beta_hat[,2], main = \"Trait 2 Obs. Z-scores\", ylab = \"zhat marg\")) abline(v = c(75, 130), h = 0)"},{"path":"/articles/effect_distribution.html","id":"custom-effect-size-distributions","dir":"Articles","previous_headings":"Controlling Effect Size Distribution","what":"Custom Effect Size Distributions","title":"Controlling Effect Size Distributions","text":"write function pass snp_effect_function, needs accept three parameters: number variants (n), standard deviation (square root total variance explained) (sd), SNP information (snp_info). last argument can used create effect distributions depend allele frequency features. default model used GWASBrewer sparse version GCTA model causal variants expected heritability explained. might, instead want use heritability model like LDAK model might want allow expected heritability explained depend annotation. example, assume like use heritability model \\[E[h_j^2] = x(f_j (1-f_j))^{0.75}(0.1 A_{1,j} + 0.13 A_{2,j} + 0.9)\\] \\(x\\) scalar depends total heritability \\(A_{1,j}\\) \\(A_{2,j}\\) values two annotations variant \\(j\\). simplified version LDAK model. use model, need data frame containing annotations pass sim_mv function via snp_info argument. using LD, input snp_info data frame number rows equal size LD pattern. Otherwise, number rows equal number variants. example, generate two annotations randomly use LD. really simulate LDAK model, better generate data LD realistic annotations. Next, write function generate effect sizes. snp_info data frame function receives include annotations given input snp_info argument sim_mv plus columns called SNP SNP name (usually useful) AF allele frequency. Now generate data, annotations included snp_info data frame included output along allele frequency SNP number. Let’s verify function thought plotting average heritability explained bins \\((f_j (1-f_j))^{0.75}(0.1 A_{1,j} + 0.13 A_{2,j} + 0.9)\\).","code":"my_snp_info <- data.frame(A1 = rexp(n = 50000, rate = 1),                            A2 = rexp(n = 50000, rate = 2)) myf <- function(n, sd, snp_info){   stopifnot(nrow(snp_info) == n)   # expected heritability explained by each variant up to a scalar   # AF, A1, and A2 are all columns of snp_info   # we provided A1 and A2. sim_mv added the AF column.   s2 <- with(snp_info,               ((AF*(1-AF))^0.75)*(0.1*A1 + 0.13*A2 + 0.9))   # Scale s2 to give sum(s2) = sd^2   scale <- (sd^2)/sum(s2)   s2 <- s2*scale   # sample standardized effect sizes from normal distributions   x <- stats::rnorm(n = n, mean = 0, sd = sqrt(s2))   return(x) } set.seed(10) sim_dat8 <- sim_mv(G = 1,                     J = 50000,                      N = 0,                      h2 = 0.3,                      pi = 1,                      snp_effect_function = myf,                     af = function(n){rbeta(n, 1, 5)},                     snp_info = my_snp_info) #> SNP effects provided for 50000 SNPs and 1 traits. head(sim_dat8$snp_info) #>          A1         A2 SNP         AF #> 1 0.7146837 0.09386619   1 0.16255313 #> 2 1.7789936 0.40783678   2 0.21165824 #> 3 0.6221027 0.88799175   3 0.34577086 #> 4 0.1222602 0.41385261   4 0.11092564 #> 5 1.9965800 0.37079998   5 0.09658463 #> 6 0.8135747 1.53049069   6 0.26393802 my_snp_info <- sim_dat8$snp_info my_snp_info$beta_joint <- sim_dat8$beta_joint[,1] my_snp_info <- mutate(my_snp_info,                        exp_h2_factor = ((AF*(1-AF))^0.75) *( 0.1*A1 + 0.13*A2 + 0.9),                       h2_explained = 2*AF*(1-AF)*(beta_joint^2)) my_snp_info$exp_h2_bin <- cut(my_snp_info$exp_h2_factor, breaks = 500) my_snp_info %>%         group_by(exp_h2_bin) %>%        summarize(mean_h2 = mean(h2_explained),                  mean_exp_h2 = mean(exp_h2_factor))%>%   ggplot() + geom_point(aes(x = mean_exp_h2, y = mean_h2)) +    xlab(\"Average Expected h2 (up to scale factor)\") +    ylab(\"Average observed h2\")"},{"path":"/articles/resampling.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"applications, may need generate multiple data sets set effect sizes. mimic performing multiple GWAS trait. two functions, resample_sumstats resample_inddata facilitate . vignette demonstrate functions well discuss important considerations simulation involves sampling GWAS multiple ancestries trait. get started, generate small sim_mv object. review function, see “Simulating Data” vignette. vignette, keep things simple 12 variants large effect sizes. course, realistic, let us see exactly going . example, two traits. first trait effect 0.2 second trait. Recalling sim_mv always sets variance trait 1, means, trait 1 explains 4% (\\(0.2^2 = 0.04\\)) variance trait 2. also use LD pattern. just specify LD pattern five variants. repeated 2.2 times cover 12 variants. specify N sample overlap.","code":"set.seed(1000) my_ld1 <- matrix(c( 1.00,  0.60,  0.40, -0.1, -0.07,                  0.60,  1.00,  0.60, -0.1, -0.07,                  0.40,  0.60,  1.00, -0.1, -0.07,                  -0.10, -0.10, -0.10,  1.0,  0.90,                  -0.07, -0.07, -0.07,  0.9,  1.00), nrow = 5, byrow = T) af1 <- c(0.35, 0.3, 0.4, 0.72, 0.75)  G <- matrix(c(0, 0.2, 0, 0), nrow = 2, byrow =TRUE) # matrix of causal effects orig_dat <- sim_mv(N = c(10000, 20000),                  J = 12,                  h2 = c(0.2, 0.3),                  pi = 0.4,                  G = G,                  R_LD = list(my_ld1),                  af = af1,                   est_s = TRUE) #> SNP effects provided for 12 SNPs and 2 traits."},{"path":"/articles/resampling.html","id":"resampling-summary-statistics-or-individual-level-data-from-the-same-population","dir":"Articles","previous_headings":"","what":"Resampling Summary Statistics or Individual Level Data from the Same Population","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"simplest scenario, want simulate performing new GWAS collecting new individual level data original set traits original population, meaning LD pattern allele frequencies .","code":""},{"path":"/articles/resampling.html","id":"resampling-summary-statistics-from-the-same-population","dir":"Articles","previous_headings":"Resampling Summary Statistics or Individual Level Data from the Same Population","what":"Resampling Summary Statistics from the Same Population","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"resample summary statistics, can use resample_sumstats. , regenerate data assuming samples new GWAS totally overlapping. new_dat1 object another object class sim_mv. new old data effect sizes beta_joint, beta_marg, direct_SNP_effects_joint, direct_SNP_effects_marg two objects. also causal effect structure trait effect matrices direct_trait_effects total_trait_effects . However, summary statistic matrices beta_hat s_estimate different due random sampling variation. true standard errors, se_beta_hat also different sample size different. Finally, since sample overlap samples new_dat1 orig_dat, R matrices give correlation effect sizes across traits different.","code":"N1 <- matrix(50000, nrow = 2, ncol = 2) new_dat1 <- resample_sumstats(dat = orig_dat,                               N = N1,                                R_LD = list(my_ld1),                                af = af1,                                est_s = TRUE) #> I will assume that the environmental variance is the same in the old and new population. #> I will assume that environmental correlation is the same in the old and new population. Note that this could result in different overall trait correlations. #> SNP effects provided for 12 SNPs and 2 traits. all.equal(orig_dat$beta_joint, new_dat1$beta_joint) #> [1] TRUE all.equal(orig_dat$beta_marg, new_dat1$beta_marg) #> [1] TRUE  head(orig_dat$beta_hat) #>             [,1]         [,2] #> [1,] -0.11039241  0.004995358 #> [2,] -0.18785203  0.002766487 #> [3,] -0.11483385  0.018581987 #> [4,]  0.22595316  0.039173114 #> [5,]  0.19996902  0.037651726 #> [6,] -0.01467208 -0.304974486 head(new_dat1$beta_hat) #>              [,1]          [,2] #> [1,] -0.116203623  0.0092874402 #> [2,] -0.175604708  0.0220111130 #> [3,] -0.110532292 -0.0007815694 #> [4,]  0.251954283  0.0446050591 #> [5,]  0.231799766  0.0426176263 #> [6,]  0.005154759 -0.3105532234  head(orig_dat$se_beta_hat) #>            [,1]       [,2] #> [1,] 0.01482499 0.01048285 #> [2,] 0.01543033 0.01091089 #> [3,] 0.01443376 0.01020621 #> [4,] 0.01574852 0.01113589 #> [5,] 0.01632993 0.01154701 #> [6,] 0.01482499 0.01048285 head(new_dat1$se_beta_hat) #>             [,1]        [,2] #> [1,] 0.006629935 0.006629935 #> [2,] 0.006900656 0.006900656 #> [3,] 0.006454972 0.006454972 #> [4,] 0.007042952 0.007042952 #> [5,] 0.007302967 0.007302967 #> [6,] 0.006629935 0.006629935  head(orig_dat$s_estimate) #>            [,1]       [,2] #> [1,] 0.01487042 0.01046558 #> [2,] 0.01514898 0.01089173 #> [3,] 0.01437689 0.01018576 #> [4,] 0.01556285 0.01122621 #> [5,] 0.01620126 0.01160266 #> [6,] 0.01489534 0.01026832 head(new_dat1$s_estimate) #>             [,1]        [,2] #> [1,] 0.006602645 0.006619905 #> [2,] 0.006844339 0.006885392 #> [3,] 0.006414776 0.006430850 #> [4,] 0.006920035 0.007005126 #> [5,] 0.007188453 0.007256993 #> [6,] 0.006635957 0.006485925"},{"path":"/articles/resampling.html","id":"resampling-individual-level-data-from-the-same-population","dir":"Articles","previous_headings":"Resampling Summary Statistics or Individual Level Data from the Same Population","what":"Resampling Individual Level Data from the Same Population","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"can also generate individual level data. use resample_inddata function. function can used produce three types output: Genotypes Genotypes phenotypes Phenotypes resample_inddata uses hapsim package generate individual level data. sample size argument, N, resample_inddata can accept three types input: scalar, vector, data frame. formats used sim_mv, N scalar vector, resample_inddata assume sample overlap. means use N = 10 two traits, get genotype information 20 individuals, half phenotype 1 information half phenotype 2 information. specify sample overlap, can use data frame format. reminder, sample size data frame columns named trait_1, … trait_[M] N. trait_[x] columns interpreted logicals N column give number samples combination studies.","code":""},{"path":"/articles/resampling.html","id":"generating-genotypes-only","dir":"Articles","previous_headings":"Resampling Summary Statistics or Individual Level Data from the Same Population > Resampling Individual Level Data from the Same Population","what":"Generating genotypes only","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"resample_inddata used generate genotypes , really “resampling” anything need input trait data. case, need supply total number individuals, number variants, LD pattern desired. generate data 15 individuals LD pattern matching one used orig_dat. returned data includes genotype matrix vector population allele frequencies.","code":"genos_only <- resample_inddata(N = 15,                                 J = 12,                                R_LD = list(my_ld1),                                 af = af1) #> Generating genotype matrix only. names(genos_only) #> [1] \"X\"  \"af\" dim(genos_only$X) #> [1] 15 12 length(genos_only$af) #> [1] 12 genos_only$X #>     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #> S1     2    1    1    1    1    0    0    0    2     2     1     1 #> S2     1    0    0    2    2    1    1    0    1     1     2     2 #> S3     0    0    0    0    1    1    1    1    1     1     2     2 #> S4     0    0    0    1    1    0    0    0    0     0     2     2 #> S5     0    0    0    2    2    0    1    0    1     2     2     1 #> S6     1    1    1    0    0    0    0    1    1     1     1     1 #> S7     0    0    1    0    0    1    0    1    1     1     2     2 #> S8     1    1    1    2    2    1    0    1    2     2     0     2 #> S9     0    0    0    1    1    1    0    0    2     2     1     1 #> S10    1    1    1    2    2    1    1    1    2     2     1     1 #> S11    1    0    0    1    1    0    0    1    1     1     2     2 #> S12    1    2    2    1    1    1    1    2    2     2     2     2 #> S13    0    0    0    2    1    0    0    1    1     1     2     2 #> S14    0    0    0    2    2    1    1    1    2     2     1     1 #> S15    0    0    0    2    2    1    0    2    0     1     2     2"},{"path":"/articles/resampling.html","id":"generating-genotypes-and-phenotypes","dir":"Articles","previous_headings":"Resampling Summary Statistics or Individual Level Data from the Same Population > Resampling Individual Level Data from the Same Population","what":"Generating Genotypes and Phenotypes","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"generate genotypes phenotypes, need include sim_mv object contains effect sizes. example, use data frame sample size format indicate three individuals phenotypes measured seven one measured. Note don’t need include J argument sim_mv object contains necessary information. vector M phenotypes individual simulated \\(Y_i = Y_{G,} + Y_{E,}\\) \\(Y_{G,}\\) vector genetic components computed genotypes effect sizes stored original sim_mv object \\(Y_{E,}\\) vector environmental components sampled normal distribution variance given Sigma_E matrix original sim_mv object. Genotype data stored new_ind_dat1$X phenotype data new_ind_dat1$Y. returned object also includes additional information including Sigma_G, Sigma_E, beta_joint meaning objects name sim_mv object. set calc_sumstats TRUE, object also include effect size standard error estimates association variant trait.","code":"N <- data.frame(\"trait_1\" = c(1, 1, 0), \"trait_2\" = c(0, 1, 1), \"N\" = c(3, 3, 4)) new_ind_dat1 <- resample_inddata(N = N,                                   dat = orig_dat,                                   R_LD = list(my_ld1),                                   af = af1,                                   calc_sumstats = FALSE) #> Generating both genotypes and phenotypes. #> SNP effects provided for 12 SNPs and 2 traits. #> I will assume that the environmental variance is the same in the old and new population. #> I will assume that environmental correlation is the same in the old and new population. Note that this could result in different overall trait correlations. names(new_ind_dat1) #> [1] \"X\"          \"Y\"          \"af\"         \"Sigma_G\"    \"Sigma_E\"    #> [6] \"pheno_sd\"   \"h2\"         \"trait_corr\" \"beta_joint\" new_ind_dat1$X #>     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #> S1     0    1    1    1    1    0    0    0    1     1     1     2 #> S2     1    1    1    2    2    1    1    1    1     1     1     1 #> S3     1    1    2    1    1    0    0    0    1     1     1     1 #> S4     0    0    0    1    1    1    1    1    1     1     1     1 #> S5     0    0    0    1    1    1    1    1    2     2     1     1 #> S6     0    0    0    2    2    1    1    0    2     2     2     1 #> S7     0    0    0    2    2    2    1    1    1     1     0     0 #> S8     0    0    0    1    1    0    0    1    2     2     2     2 #> S9     2    2    1    0    0    0    1    1    2     2     2     2 #> S10    0    1    1    2    2    1    1    1    1     1     2     1 new_ind_dat1$Y #>            y_1         y_2 #> 1  -0.64246004          NA #> 2   1.26150568          NA #> 3  -0.05425048          NA #> 4   0.47374118  0.77563114 #> 5  -0.66257053 -0.64414580 #> 6   1.34406827 -0.08414463 #> 7           NA  0.42914109 #> 8           NA -2.21483702 #> 9           NA -1.61651866 #> 10          NA  0.55091258"},{"path":"/articles/resampling.html","id":"generating-phenotypes-only","dir":"Articles","previous_headings":"Resampling Summary Statistics or Individual Level Data from the Same Population > Resampling Individual Level Data from the Same Population","what":"Generating Phenotypes Only","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"Finally, can use resample_inddata calculate phenotypes previously generated set genotypes sim_mv object. , supply genotypes matrix genos argument. supplied, genotypes matrix returned. Even though genotype matrix supplied, also need supply R_LD af arguments population LD allele frequencies. used correctly calculate genetic variance-covariance matrix. Note important total number individuals implied sample size argument match number rows genotypes matrix. following call generate error supplied 15 genotypes sample size data frame includes 10 individuals. can fix poblem including first 10 rowsof genotype matrix.","code":"phenos_only <- resample_inddata(N = N,                                  dat = orig_dat,                                  genos = genos_only$X,                                 R_LD = list(my_ld1),                                 af = af1,                                 calc_sumstats = FALSE) #> Generating phenotypes only. #> Error in check_matrix(genos, \"genos\", ntotal, J): Expected genos to have 10 rows, found 15 phenos_only <- resample_inddata(N = N,                                  dat = orig_dat,                                  genos = genos_only$X[1:10,],                                 R_LD = list(my_ld1),                                 af = af1,                                 calc_sumstats = FALSE) #> Generating phenotypes only. #> SNP effects provided for 12 SNPs and 2 traits. #> I will assume that the environmental variance is the same in the old and new population. #> I will assume that environmental correlation is the same in the old and new population. Note that this could result in different overall trait correlations. names(phenos_only) #> [1] \"Y\"          \"af\"         \"Sigma_G\"    \"Sigma_E\"    \"pheno_sd\"   #> [6] \"h2\"         \"trait_corr\" \"beta_joint\" phenos_only$Y #>            y_1        y_2 #> 1   1.22836882         NA #> 2  -0.42435626         NA #> 3  -0.62076763         NA #> 4  -0.86060862  0.5125080 #> 5   0.09021464 -1.0949420 #> 6  -0.69423142 -1.4815503 #> 7           NA -1.1507476 #> 8           NA  0.1640274 #> 9           NA -0.4314887 #> 10          NA -0.8675082"},{"path":"/articles/resampling.html","id":"resampling-data-from-a-different-population","dir":"Articles","previous_headings":"","what":"Resampling Data from a Different Population","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"resample_sumstats resample_inddata can used different LD allele frequencies used create original object. However, special considerations trait variance scaling discuss section.","code":""},{"path":"/articles/resampling.html","id":"understanding-effect-size-units","dir":"Articles","previous_headings":"Resampling Data from a Different Population","what":"Understanding Effect Size Units","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"understand resampled data use different LD allele frequencies original data, important understand units effect sizes produced sim_mv. sim_mv always assumes phenotype variance equal 1, interpretation effects beta_joint change phenotype units phenotype SD per change genotype units either allele genotype SD. see genotype unit, can check geno_scale object. example, default, sim_mv use per-allele scale allele frequencies available otherwise use per-SD scale. can also check phenotypes scaled unit variance pheno_sd always vector 1’s object produced sim_mv.","code":"orig_dat$geno_scale #> [1] \"allele\" orig_dat$pheno_sd #> [1] 1 1"},{"path":"/articles/resampling.html","id":"changing-ld-and-allele-frequencies","dir":"Articles","previous_headings":"Resampling Data from a Different Population","what":"Changing LD and Allele Frequencies","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"resampling functions GWASBrewer assume effect sizes new population old population genotype phenotype scale given. changing populations, much sensible assume effect sizes constant per-allele scale per-genotype SD scale. means want regenerate data different population, good idea start input data geno_scale equal “allele”. One consequence differing allele frequencies LD structure total genetic variance different new population old. default, resampling functions assume environmental variance two populations. means overall variance phenotype new population probably 1. resampling functions rescale phenotype new population mean phenotypes two populations different units comparable. However, can rescale output fact using like phenotypes unit variance. can see action resampling summary statistics using different allele frequencies LD pattern used originally. Notice function produces message let us know phenotype different variance new population. can check looking pheno_sd. genetic covariance matrix, heritability, overall trait correlation also different. However, environmental covariance . Note features kept constant environmental variance Sigma_E per-allele joint effects, beta_joint.","code":"af2 <- rep(0.1, 5) my_ld2 <- matrix(0.3, nrow = 5, ncol = 5) diag(my_ld2) <- 1 new_dat2 <- resample_sumstats(dat = orig_dat,                                N = N,                                R_LD = list(my_ld2),                                af = af2) #> Genetic variance in the new population differs from the genetic variance in the old population. #> I will assume that the environmental variance is the same in the old and new population. #> I will assume that environmental correlation is the same in the old and new population. Note that this could result in different overall trait correlations. #> Note that the phenotype in the new population has a different variance from the phenotype in the old population. #> I will keep the phenotype on the same scale as the original data, so effect sizes in the old and new object are comparable. If you would like to rescale the phenotype to have variance 1, use rescale_sumstats. #> SNP effects provided for 12 SNPs and 2 traits. new_dat2$pheno_sd #> [1] 0.9649663 0.9164662 orig_dat$pheno_sd #> [1] 1 1 new_dat2$h2 #> [1] 0.04683348 0.11545049 orig_dat$h2 #> [1] 0.1124495 0.2570578 new_dat2$Sigma_G #>             [,1]        [,2] #> [1,] 0.043609461 0.008093447 #> [2,] 0.008093447 0.096968051 orig_dat$Sigma_G #>            [,1]       [,2] #> [1,] 0.11244947 0.01934268 #> [2,] 0.01934268 0.25705783 new_dat2$Sigma_E #>           [,1]      [,2] #> [1,] 0.8875505 0.1736201 #> [2,] 0.1736201 0.7429422 orig_dat$Sigma_E #>           [,1]      [,2] #> [1,] 0.8875505 0.1736201 #> [2,] 0.1736201 0.7429422"},{"path":"/articles/resampling.html","id":"changing-environmental-variance-or-covariance","dir":"Articles","previous_headings":"Resampling Data from a Different Population","what":"Changing Environmental Variance or Covariance","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"Although default behavior keep Sigma_E constant, can change using arguments new_env_var, new_h2, new_R_E new_R_obs. options resample_sumstats resample_inddata. new_env_var new_h2 arguments provide different ways specifying environmental variance one can used time. new_h2 gives heritability new population new_env_var directly gives environmental variance. parameters new_R_E new_R_obs alternate ways specifying environmental correlation. new_R_E directly specifies enviromental correlation new_R_obs gives total trait correlation. one two parameters can supplied. Note specifying new_h2 always result exactly heritability specified. contrast h2 argument sim_mv gives expected heritability.","code":"new_R_E <- diag(2) new_R_E[1,2] <- new_R_E[2,1] <- 0.4 new_dat3 <- resample_sumstats(dat = orig_dat,                                N = N,                                R_LD = list(my_ld2),                                af = af2,                               new_env_var = c(0.9, 1.3),                                new_R_E = new_R_E) #> Genetic variance in the new population differs from the genetic variance in the old population. #> Note that the phenotype in the new population has a different variance from the phenotype in the old population. #> I will keep the phenotype on the same scale as the original data, so effect sizes in the old and new object are comparable. If you would like to rescale the phenotype to have variance 1, use rescale_sumstats. #> SNP effects provided for 12 SNPs and 2 traits. new_dat3$Sigma_E #>           [,1]      [,2] #> [1,] 0.9000000 0.4326662 #> [2,] 0.4326662 1.3000000 cov2cor(new_dat3$Sigma_E) #>      [,1] [,2] #> [1,]  1.0  0.4 #> [2,]  0.4  1.0 new_dat3$h2 #> [1] 0.04621558 0.06941322 new_dat4 <- resample_sumstats(dat = orig_dat,                                N = N,                                R_LD = list(my_ld2),                                af = af2,                               new_h2 = c(0.15, 0.25),                                new_R_E = new_R_E) #> Genetic variance in the new population differs from the genetic variance in the old population. #> Note that the phenotype in the new population has a different variance from the phenotype in the old population. #> I will keep the phenotype on the same scale as the original data, so effect sizes in the old and new object are comparable. If you would like to rescale the phenotype to have variance 1, use rescale_sumstats. #> SNP effects provided for 12 SNPs and 2 traits. new_dat4$h2 #> [1] 0.15 0.25 new_dat4$Sigma_E #>           [,1]      [,2] #> [1,] 0.2471203 0.1072480 #> [2,] 0.1072480 0.2909042"},{"path":"/articles/resampling.html","id":"rescaling-effect-size-units","dir":"Articles","previous_headings":"Resampling Data from a Different Population","what":"Rescaling Effect Size Units","title":"Resampling and Re-Scaling Summary and Individual Level Data","text":"reason want change units effects object produced sim_mv resmaple_sumstats, can use rescale_sumstats. example, code , rescale effects orig_dat per-SD scale. Note , delete allele frequency information snp_info table. allele frequency irrelevant per-SD scaled effects. convert back per-allele scale, need supply allele frequency. can also change scale outcomes. effects changing phenotype scale. First effect sizes different. case effect sizes trait 1 multiplied 1.4 effect sizes trait 2 multiplied 0.8. Second, genetic environmental covariance matrices scaled appropriately. Note heritability, orig_rescale3$h2 changed longer equal diagonal Sigma_G. trait correlation trait_corr also . final difference total direct trait effects matrix. case, trait 1 multiplied 1.4 trait 2 multiplied 0.8. original scale, one unit increase trait 1 caused 0.2 unit increase trait 2. new scale, 1 unit increase trait 1 causes \\(0.2 \\cdot (0.8/1.4) = 0.114\\) unit increase trait 2. Note causal relationship traits implies following relationship effect sizes: basis methods like Mendelian randomization. can see scaling, relationship still true.","code":"orig_rescale1 <- rescale_sumstats(dat = orig_dat,                                    output_geno_scale = \"sd\") orig_rescale1$beta_joint #>               [,1]          [,2] #>  [1,]  0.000000000  0.0000000000 #>  [2,] -0.097136125  0.0188220320 #>  [3,]  0.000000000  0.0000000000 #>  [4,]  0.146918495  0.0293836989 #>  [5,]  0.000000000  0.0000000000 #>  [6,]  0.000000000  0.0061492991 #>  [7,] -0.003777444 -0.0007554889 #>  [8,]  0.000000000 -0.5047783058 #>  [9,]  0.000000000  0.0000000000 #> [10,]  0.000000000  0.0000000000 #> [11,]  0.000000000  0.0000000000 #> [12,] -0.280286489 -0.0560572978 orig_rescale1$geno_scale #> [1] \"sd\" orig_dat$beta_joint #>               [,1]         [,2] #>  [1,]  0.000000000  0.000000000 #>  [2,] -0.149884295  0.029043026 #>  [3,]  0.000000000  0.000000000 #>  [4,]  0.231374881  0.046274976 #>  [5,]  0.000000000  0.000000000 #>  [6,]  0.000000000  0.009116327 #>  [7,] -0.005828723 -0.001165745 #>  [8,]  0.000000000 -0.728584727 #>  [9,]  0.000000000  0.000000000 #> [10,]  0.000000000  0.000000000 #> [11,]  0.000000000  0.000000000 #> [12,] -0.432491442 -0.086498288  ## back to per-allele scale orig_rescale2 <- rescale_sumstats(dat = orig_rescale1,                                    output_geno_scale = \"allele\",                                    af = orig_dat$snp_info$AF) orig_rescale2$beta_joint #>               [,1]         [,2] #>  [1,]  0.000000000  0.000000000 #>  [2,] -0.149884295  0.029043026 #>  [3,]  0.000000000  0.000000000 #>  [4,]  0.231374881  0.046274976 #>  [5,]  0.000000000  0.000000000 #>  [6,]  0.000000000  0.009116327 #>  [7,] -0.005828723 -0.001165745 #>  [8,]  0.000000000 -0.728584727 #>  [9,]  0.000000000  0.000000000 #> [10,]  0.000000000  0.000000000 #> [11,]  0.000000000  0.000000000 #> [12,] -0.432491442 -0.086498288 orig_rescale3 <- rescale_sumstats(dat = orig_dat,                                    output_geno_scale = \"allele\",                                    output_pheno_sd = c(1.4, 0.8)) orig_rescale3$Sigma_G #>            [,1]       [,2] #> [1,] 0.22040097 0.02166381 #> [2,] 0.02166381 0.16451701 orig_rescale3$Sigma_E #>           [,1]      [,2] #> [1,] 1.7395990 0.1944545 #> [2,] 0.1944545 0.4754830 orig_rescale3$Sigma_G + orig_rescale3$Sigma_E #>           [,1]      [,2] #> [1,] 1.9600000 0.2161183 #> [2,] 0.2161183 0.6400000 with(orig_dat, all.equal(direct_SNP_effects_joint[,2] + total_trait_effects[1,2]*direct_SNP_effects_joint[,1], beta_joint[,2])) #> [1] TRUE with(orig_rescale3, all.equal(direct_SNP_effects_joint[,2] + total_trait_effects[1,2]*direct_SNP_effects_joint[,1], beta_joint[,2])) #> [1] TRUE"},{"path":"/articles/simulating_data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulating Data","text":"vignette demonstrates use sim_mv function simulate data different types GWAS data.","code":""},{"path":"/articles/simulating_data.html","id":"introduction-to-sim_mv","dir":"Articles","previous_headings":"","what":"Introduction to sim_mv","title":"Simulating Data","text":"sim_mv function generates GWAS summary statistics multiple continuous traits linear structural equation model encoded matrix direct effects. Variants can generated without LD. also helper functions LD-pruning generating special kinds direct effect matrices. sim_mv function internally calls general function sim_lf generates summary statistics given latent factor structure set traits. Throughout vignette, use \\(M\\) represent number traits \\(J\\) represent number variants.","code":""},{"path":[]},{"path":"/articles/simulating_data.html","id":"input","dir":"Articles","previous_headings":"Basic Usage","what":"Input","title":"Simulating Data","text":"sim_mv function five required arguments: N: GWAS sample size trait. can scalar, vector, matrix, data frame. vector, N length equal \\(M\\). overlapping samples GWAS, N \\(M \\times M\\) matrix data frame format described “Sample Overlap” section . J: number SNPs simulate (scalar). h2: heritability trait. can scalar length \\(M\\) vector. pi: proportion SNPs direct effect trait. can scalar, length \\(M\\) vector, matrix \\(J \\times M\\) matrix (details matrix format can found Effect Size Distribution vignette). G: matrix specifying direct causal effects traits. G \\(M\\times M\\) matrix described . Alternatively, causal effects traits, G can given positive integer \\(M\\). equivalent G = matrix(0, nrow = M, ncol = M). additional optional arguments: R_E R_obs: Alternative ways specify environmental correlation (see “Sample Overlap” section details). R_LD: list LD blocks (see “Simulating Data LD”). af: Vector allele frequencies (required R_LD specified). R_LD specified, af can scalar, vector length J function (details ). R_LD specified, af must vector length corresponding size LD pattern (see “Simulating Data LD”) sporadic_pleiotropy: Allow single variant direct effects multiple traits random. Defaults TRUE. pi_exact: TRUE, number direct effect SNPs trait exactly equal round(pi*J). Defaults FALSE. h2_exact: TRUE, heritability trait exactly h2. Defaults FALSE. est_s: TRUE, return estimates se(beta_hat). Defaults FALSE generally recommend setting est_s TRUE making use standard errors. snp_effect_function snp_info parameters useful specifying non-default distributions effect sizes. covered vignette covered Effect Size Distributions vignette.","code":""},{"path":"/articles/simulating_data.html","id":"output","dir":"Articles","previous_headings":"Basic Usage","what":"Output","title":"Simulating Data","text":"sim_mv function returns object class sim_mv. object contains following elements: GWAS summary statistics contained two three matrices: beta_hat: Simulated GWAS effect estimates standard errors. se_beta_hat: True standard errors beta_hat. s_estimate: est_s= TRUE simulated estimate se_beta_hat. True marginal joint, total direct effects contained four matrices: beta_joint: Total causal effects SNPs traits. beta_marg: Expected marginal association SNPs traits. beta_marg expected value beta_hat. LD, beta_marg beta_joint . direct_SNP_effects_joint: Direct causal effects SNPs traits. Direct means mediated traits. direct_SNP_effects_marg: Like beta_marg considering direct rather total effects. relationship traits contained two matrices: direct_trait_effects: Matrix direct effects traits. input G. total_trait_effects: Matrix total effects traits. Trait covariance described four matrices: Sigma_G: Genetic variance-covariance matrix, determined heritability G. Sigma_E: Environmental variance-covariance matrix. determined heritability R_E. trait_corr: Population trait correlation, equal cov2cor(Sigma_G + Sigma_E). data produces sim_mv, trait variance always equal 1, trait_corr = Sigma_G + Sigma_E. R: Correlation sampling error beta_hat across traits, equal trait_corr scaled matrix sample overlap proportions. pieces information useful complicated scenarios: h2: Realized trait heritability. data produced sim_mv, always equal diag(Sigma_G). However may case resampled data (see Resampling Data vignette). pheno_sd: Standard deviation traits. data produced sim_mv, always vector 1’s. snp_info: data frame variant information including allele frequency possibly information (see Effect Distribution vignette). geno_scale: Equal allele effect sizes per allele sd effect sizes per genotype SD (.e. standardized). order columns results corresponds order traits G.","code":""},{"path":"/articles/simulating_data.html","id":"simplest-usage","dir":"Articles","previous_headings":"","what":"Simplest Usage","title":"Simulating Data","text":"simplest thing sim_mv generate summary statistics \\(M\\) traits causal relationship LD variants. code , generate data 3 traits 100,000 variants. Since sample size specified scalar, three GWAS sample size overlapping samples. variety, give trait different heritability different proportion causal variants. sim_mv function always assumes traits scaled variance equal 1, effect sizes interpretable expected change trait units SD per either alternate allele (geno_scale = allele) per genotype SD (geno_scale = sd). case, dat_simple$geno_scale equal sd allele frequencies provided. realized genetic environmental variance matrices Sigma_G Sigma_E. diagonal dat_simple$Sigma_G equal trait heritability (also stored dat_simple$h2). can see numbers close exactly equal values input h2 parameter. h2 provides expected heritability. want force realized heritability exactly equal input h2, can use h2_exact = TRUE. genetic covariance (non-diagonal elements Sigma_G) slightly non-zero traits share small number causal variants chance. want prevent , can use sporadic_pleiotropy=FALSE. However, cases, possible satisfy sporadic_pleiotropy = FALSE option generate error. simulated summary effect estimates dat_simple$beta_hat simulated standard error estimates dat_simple$s_estimate. case, 100,000 3 matrices. actual GWAS data, two matrices information get observe. Everything else stored dat_simple information unobservable “real” data useful benchmarking analysis methods. effect estimates dat_simple$beta_hat always estimates true marginal effects dat_simple$beta_marg. Since LD data, marginal joint effects , find dat_simple$beta_marg dat_simple$beta_joint identical. can identify causal variants variants non-zero values beta_joint. example, (dat_simple$beta_joint[,1] != 0) give indices variants causal trait 1. estimates dat_simple$s_estimate estimates standard error dat_simple$beta_hat. true standard errors stored dat_simple$se_beta_hat. left est_s default value FALSE, dat_simple contain s_estimate matrix.","code":"dat_simple <- sim_mv(G = 3, # using the shortcut for specifying unrelated traits.                      # equivalent to G = matrix(0, nrow = 3, ncol = 3)                      N = 50000, # sample size, same for all three traits                      J = 100000, # number of variants                      h2 = c(0.1, 0.25, 0.4), # heritability                      pi = c(0.01, 0.005, 0.02), # proportion of causal variants                      est_s = TRUE # generate standard error estimates.                      ) #> SNP effects provided for 100000 SNPs and 3 traits. dat_simple$Sigma_G #>              [,1]         [,2]         [,3] #> [1,] 1.045339e-01 4.515705e-06 0.0005262836 #> [2,] 4.515705e-06 2.530663e-01 0.0009271551 #> [3,] 5.262836e-04 9.271551e-04 0.4429666631 dat_simple$Sigma_E #>           [,1]      [,2]      [,3] #> [1,] 0.8954661 0.0000000 0.0000000 #> [2,] 0.0000000 0.7469337 0.0000000 #> [3,] 0.0000000 0.0000000 0.5570333 head(dat_simple$beta_hat) #>              [,1]         [,2]         [,3] #> [1,] 0.0063610849 -0.007271609  0.003926946 #> [2,] 0.0009913487  0.012587585  0.003931295 #> [3,] 0.0031938057 -0.002387450 -0.003170087 #> [4,] 0.0030629600  0.001481305 -0.002369274 #> [5,] 0.0020414224  0.007953421  0.005325885 #> [6,] 0.0030602370 -0.002037463 -0.008673129 head(dat_simple$s_estimate) #>             [,1]        [,2]        [,3] #> [1,] 0.004478273 0.004480611 0.004483377 #> [2,] 0.004468891 0.004478611 0.004482622 #> [3,] 0.004472107 0.004466985 0.004465830 #> [4,] 0.004465952 0.004460529 0.004476516 #> [5,] 0.004449150 0.004493462 0.004482853 #> [6,] 0.004480817 0.004464715 0.004479402"},{"path":"/articles/simulating_data.html","id":"specifying-causal-relationships-between-traits","dir":"Articles","previous_headings":"","what":"Specifying Causal Relationships Between Traits","title":"Simulating Data","text":"matrix G specifies linear structural equation model set traits. generate set \\(M\\) traits causal relationships, G can set either equal M \\(M\\times M\\) matrix 0’s. Otherwise, G must \\(M \\times M\\) matrix G[,j] specifying direct linear effect trait \\(\\) trait \\(j\\). diagonal entries \\(G\\) 0 (self effects). error generated G specifies graph contains cycles. Since traits variance equal 1, G[,j]^2 proportion trait \\(j\\) variance explained direct effect trait \\(\\). example, matrix corresponds graph simulate simple data graph, can use specification, four GWAS sample size 50,000, overlapping samples. Since J = 100000 pi = 0.01, expect trait 1000 direct effect variants. causal relationships traits, now interesting things notice output. First, can see genetic environmental covariance traits. default, sim_mv assumes direct environmental components trait independent, meaning DAG explains correlation traits. modifiable using R_E R_obs arguments, discussed bit later vignette. Relationships traits described two matrices, direct_trait_effects equal input G matrix total_trait_effects gives total effect trait trait. can notice direct effect \\(Z\\) \\(W\\) -0.548 specified total effect includes effects mediated \\(X\\) \\(Y\\) well, \\(-0.548 + 0.447\\cdot 0.387 + 0.447\\cdot 0.5 \\cdot 0.316 = -0.304\\). can also use output understand variants direct effects trait indirect (mediated) effects. direct_SNP_effects_joint object gives direct effect variant trait beta_joint gives total effect variant. Direct total marginal effects stored direct_SNP_effects_marg beta_marg. Since LD, _marg _joint matrices . Direct SNP effects always independent across traits total SNP effects sum direct effects indirect effects mediated traits. make plots see difference. First plot direct SNP effects \\(Z\\) vs direct SNP effects \\(W\\)  variants direct effects one \\(Z\\) \\(W\\) small number affect sporadic_pleiotropy = TRUE default. Next plot total SNP effects \\(Z\\) vs total SNP effects \\(W\\). \\(Z\\) causal effect \\(W\\), variants effects \\(Z\\) also affect \\(W\\). line plot slope equal total effect \\(Z\\) \\(W\\). majority SNPs non-zero effect \\(Z\\) fall exactly line. sporadic_pleiotropy= FALSE, variants non-zero effect \\(Z\\) fall line. variants vertical line 0 variants non-zero direct effect \\(W\\) direct effect \\(Z\\).","code":"G <- matrix(c(0, sqrt(0.25), 0, sqrt(0.15),                0, 0, 0, sqrt(0.1),                sqrt(0.2), 0, 0, -sqrt(0.3),                0, 0, 0, 0), nrow = 4, byrow = TRUE) colnames(G) <- row.names(G) <- c(\"X\", \"Y\", \"Z\", \"W\") G #>           X   Y Z          W #> X 0.0000000 0.5 0  0.3872983 #> Y 0.0000000 0.0 0  0.3162278 #> Z 0.4472136 0.0 0 -0.5477226 #> W 0.0000000 0.0 0  0.0000000 sim_dat1 <- sim_mv(G = G,                   N = 50000,                   J = 100000,                   h2 = c(0.3, 0.3, 0.5, 0.4),                    pi = 0.01,                   est_s = TRUE) #> SNP effects provided for 100000 SNPs and 4 traits. sim_dat1$Sigma_G #>            X          Y          Z           W #> X 0.28249614 0.14135064  0.2179663  0.03485498 #> Y 0.14135064 0.29912608  0.1089297  0.08886324 #> Z 0.21796635 0.10892974  0.4892269 -0.14942217 #> W 0.03485498 0.08886324 -0.1494222  0.40289524 sim_dat1$Sigma_E #>           X         Y          Z          W #> X 0.7175039 0.3545701  0.2288111  0.2619020 #> Y 0.3545701 0.7008739  0.1130720  0.2951464 #> Z 0.2288111 0.1130720  0.5107731 -0.1531603 #> W 0.2619020 0.2951464 -0.1531603  0.5971048 sim_dat1$trait_corr #>           X         Y          Z          W #> X 1.0000000 0.4959207  0.4467774  0.2967570 #> Y 0.4959207 1.0000000  0.2220017  0.3840097 #> Z 0.4467774 0.2220017  1.0000000 -0.3025824 #> W 0.2967570 0.3840097 -0.3025824  1.0000000 sim_dat1$direct_trait_effects #>           X   Y Z          W #> X 0.0000000 0.5 0  0.3872983 #> Y 0.0000000 0.0 0  0.3162278 #> Z 0.4472136 0.0 0 -0.5477226 #> W 0.0000000 0.0 0  0.0000000 sim_dat1$total_trait_effects #>           X         Y Z          W #> X 0.0000000 0.5000000 0  0.5454122 #> Y 0.0000000 0.0000000 0  0.3162278 #> Z 0.4472136 0.2236068 0 -0.3038068 #> W 0.0000000 0.0000000 0  0.0000000 plot(sim_dat1$direct_SNP_effects_joint[,3], sim_dat1$direct_SNP_effects_joint[,4],       xlab = \"Direct Z effect\", ylab = \"Direct W effect\") plot(sim_dat1$beta_joint[,3], sim_dat1$beta_joint[,4],       xlab = \"Total Z effect\", ylab = \"Total W effect\") abline(0, sim_dat1$total_trait_effects[3,4], col = \"red\", lty = 2, lwd = 2)"},{"path":"/articles/simulating_data.html","id":"specifying-allele-frequencies","dir":"Articles","previous_headings":"","what":"Specifying Allele Frequencies","title":"Simulating Data","text":"Allele frequencies can specified using af argument can accept scalar, vector length \\(J\\), function takes single argument returns vector allele frequencies length determined argument. af scalar, allele frequency used variants. function specification used example . af argument provided, sim_mv return results per-allele scale geno_scale element returned object equal allele. snp_info element returned object also include allele frequency variant.","code":"sim_dat2 <- sim_mv(G = G,                   N = 50000,                    J = 10000,                    h2 = c(0.3, 0.3, 0.5, 0.4),                    pi = 0.01,                    af = function(n){rbeta(n, 1, 5)}) #> SNP effects provided for 10000 SNPs and 4 traits.  sim_dat2$geno_scale #> [1] \"allele\" head(sim_dat2$snp_info) #>   SNP         AF #> 1   1 0.05448172 #> 2   2 0.52558863 #> 3   3 0.02522715 #> 4   4 0.29653930 #> 5   5 0.29400173 #> 6   6 0.09964018"},{"path":"/articles/simulating_data.html","id":"simulating-data-with-ld","dir":"Articles","previous_headings":"","what":"Simulating Data with LD","title":"Simulating Data","text":"sim_mv function can used generate data LD inputting list LD matrices corresponding allele frequency information. function work fastest LD matrix broken smallish independent blocks. input data format LD pattern list either ) matrices, b) sparse matrices (class dsCMatrix) c) eigen decompositions (class eigen). R_LD interpreted providing blocks block-diagonal SNP correlation matrix. Importantly, supplied LD pattern size number SNPs wish generate (J). repeated subsetted necessary create LD pattern appropriate size. package contains built-data set containing LD pattern Chromosome 19 HapMap3 broken 39 blocks. LD pattern estimated HapMap3 European subset using LDShrink. data set can also downloaded . LD pattern must accompanied vector allele frequencies length equal total size LD pattern (.e. sum size block list). Let’s look built-LD data LD pattern covers 19,490 SNPs, equal length AF vector. built-LD pattern corresponds density 1.2 million variants per genome. However, example, generate data 100k variants. means causal effects denser might realistic data number effect variants. data LD, _joint objects _marg objects identical. example, can compare beta_joint beta_marg third trait (\\(Z\\)).  Variants non-zero values beta_joint[,3] causal effects \\(Z\\) non-zero values beta_marg[,3] non-zero marginal association \\(Z\\), meaning LD least one causal variant. plot, see many variants causal effect non-zero marginal association, expected. causal variants don’t fall exactly red line , multiple causal variants may fall LD block.","code":"data(\"ld_mat_list\") data(\"AF\")  length(ld_mat_list) #> [1] 39  sapply(ld_mat_list, class) #>  [1] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #>  [7] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #> [13] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #> [19] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #> [25] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #> [31] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #> [37] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" # This prints the number of SNPs in each block sapply(ld_mat_list, nrow) #>  [1] 140 519 339 435 523 280 675 325 651 548 274 483 442 744 460 177 469 173 358 #> [20] 564 392 737 596 818 307 863 276 435 204 364 480 381 757 844 753 656 483 856 #> [39] 709  sapply(ld_mat_list, nrow) %>% sum() #> [1] 19490  length(AF) #> [1] 19490 set.seed(10) sim_dat1_LD <- sim_mv(G = G,                       J = 1e5,                        N = 50000,                        h2 = c(0.3, 0.3, 0.5, 0.4),                        pi = 0.01,                        R_LD = ld_mat_list,                        af = AF) #> SNP effects provided for 100000 SNPs and 4 traits. with(sim_dat1_LD, plot(beta_joint[,3], beta_marg[,3])) abline(0, 1, lty = 2, lwd =2, col = \"red\")"},{"path":"/articles/simulating_data.html","id":"ld-pruning-ld-proxies-and-ld-matrix-extraction","dir":"Articles","previous_headings":"Simulating Data with LD","what":"LD-Pruning, LD-Proxies, and LD Matrix Extraction","title":"Simulating Data","text":"Many post-GWAS applications Mendelian randomization polygenic risk score construction require LD-pruned set variants. GWASBrewer contains LD-related functions help pruning testing methods require input LD matrices. Note methods use true LD pattern rather estimated LD. sim_ld_prune function perform LD-clumping simulated data, prioritizing variants according supplied pvalue vector. Although argument called pvalue, can numeric vector used prioritize variants. pvalue argument can also accept integer. pvalue = , variants prioritized according p-value ith trait simulated data. pvalue omitted, variants prioritized randomly (different result obtained re-run unless seed set). speed performance, need variants \\(p\\)-value less certain threshold, supply pvalue_thresh argument. prune based p-values trait \\(Z\\) two equivalent ways. sim_ld_prune returns vector indices corresponding LD-pruned set variants. sim_ld_proxy function return indices LD-proxies (variants LD given threshold) supplied set variants. extract proxies arbitrary variants. return_mat option cause function return LD matrix proxies well indices proxies Finally, sim_extract_ld function extract LD matrix set variants.","code":"pruned_set1 <- sim_ld_prune(dat = sim_dat1_LD,                              pvalue = 3,                              R_LD = ld_mat_list,                              r2_thresh = 0.1,                             pval_thresh = 1e-6) #> Prioritizing variants based on p-value for trait 3 length(pruned_set1) #> [1] 354 pval3 <- with(sim_dat1_LD, 2*pnorm(-abs(beta_hat[,3]/se_beta_hat[,3]))) pruned_set2 <- sim_ld_prune(dat = sim_dat1_LD,                              pvalue = pval3,                              R_LD = ld_mat_list,                              r2_thresh = 0.1,                             pval_thresh = 1e-6) all.equal(pruned_set1, pruned_set2) #> [1] TRUE ld_proxies <- sim_ld_proxy(sim_dat1_LD, index = c(100, 400, 600), R_LD = ld_mat_list, r2_thresh = 0.64, return_mat = TRUE) ld_proxies #> [[1]] #> [[1]]$index #> [1] 100 #>  #> [[1]]$proxy_index #> [1] 98 99 #>  #> [[1]]$Rproxy #>           100        98        99 #> 100 1.0000000 0.9568668 0.9745924 #> 98  0.9568668 1.0000000 0.9798682 #> 99  0.9745924 0.9798682 1.0000000 #>  #>  #> [[2]] #> [[2]]$index #> [1] 400 #>  #> [[2]]$proxy_index #> [1] 395 396 397 398 399 401 402 #>  #> [[2]]$Rproxy #>           400       395       396       397       398       399       401 #> 400 1.0000000 0.9495092 0.9661446 0.9793188 0.9730871 0.9306611 0.9105497 #> 395 0.9495092 1.0000000 0.9812294 0.9675572 0.9742288 0.9302869 0.8876271 #> 396 0.9661446 0.9812294 1.0000000 0.9841205 0.9905250 0.9454487 0.9054550 #> 397 0.9793188 0.9675572 0.9841205 1.0000000 0.9810106 0.9367627 0.9175545 #> 398 0.9730871 0.9742288 0.9905250 0.9810106 1.0000000 0.9522425 0.9119614 #> 399 0.9306611 0.9302869 0.9454487 0.9367627 0.9522425 1.0000000 0.8731959 #> 401 0.9105497 0.8876271 0.9054550 0.9175545 0.9119614 0.8731959 1.0000000 #> 402 0.8080771 0.7821419 0.7934351 0.8097815 0.7991366 0.7643812 0.7522628 #>           402 #> 400 0.8080771 #> 395 0.7821419 #> 396 0.7934351 #> 397 0.8097815 #> 398 0.7991366 #> 399 0.7643812 #> 401 0.7522628 #> 402 1.0000000 #>  #>  #> [[3]] #> [[3]]$index #> [1] 600 #>  #> [[3]]$proxy_index #> [1] 601 606 #>  #> [[3]]$Rproxy #>            600        601        606 #> 600  1.0000000 -0.8044757  0.8670863 #> 601 -0.8044757  1.0000000 -0.7193148 #> 606  0.8670863 -0.7193148  1.0000000 ld_mat1 <- sim_extract_ld(sim_dat1_LD, index = 600:606, R_LD = ld_mat_list) ld_mat1 #>            600        601        602        603        604        605 #> 600  1.0000000 -0.8044757 -0.6715969 -0.7920287 -0.7323562 -0.4605856 #> 601 -0.8044757  1.0000000  0.8354364  0.9791149  0.9404418  0.6067155 #> 602 -0.6715969  0.8354364  1.0000000  0.8138201  0.7891286  0.6555054 #> 603 -0.7920287  0.9791149  0.8138201  1.0000000  0.9363088  0.5849580 #> 604 -0.7323562  0.9404418  0.7891286  0.9363088  1.0000000  0.5890082 #> 605 -0.4605856  0.6067155  0.6555054  0.5849580  0.5890082  1.0000000 #> 606  0.8670863 -0.7193148 -0.5968298 -0.7200977 -0.7469780 -0.3902207 #>            606 #> 600  0.8670863 #> 601 -0.7193148 #> 602 -0.5968298 #> 603 -0.7200977 #> 604 -0.7469780 #> 605 -0.3902207 #> 606  1.0000000"},{"path":"/articles/simulating_data.html","id":"specifying-sample-size-sample-overlap-and-environmental-correlation","dir":"Articles","previous_headings":"","what":"Specifying Sample Size, Sample Overlap, and Environmental Correlation","title":"Simulating Data","text":"two GWAS performed different traits using overlapping samples, sampling errors effect estimates correlated. two GWAS sample sizes \\(N_1\\) \\(N_2\\) \\(N_c\\) overlapping samples, correlation \\(\\hat{z}_{1j}\\) \\(\\hat{z}_{2j}\\), \\(z\\)-scores variant \\(j\\) study 1 study 2, approximately \\(\\frac{N_c}{\\sqrt{N_1 N_2}} \\rho_{1,2}\\) \\(\\rho_{1,2}\\) observational trait correlation (assuming studies conducted super population). describe specify observational correlation sample overlap.","code":""},{"path":"/articles/simulating_data.html","id":"specifying-sample-size-and-sample-overlap","dir":"Articles","previous_headings":"Specifying Sample Size, Sample Overlap, and Environmental Correlation","what":"Specifying Sample Size and Sample Overlap","title":"Simulating Data","text":"sample size argument, N, can specified scalar, vector, matrix, data frame. scalar matrix specification indicate overlapping samples GWAS. specify sample overlap, need use matrix data frame formats. N matrix, dimension \\(M\\times M\\) N[,] giving sample size study \\(\\) N[,j] giving number samples study \\(\\) study \\(j\\). data frame format, \\(N\\) columns named trait_1, … trait_[M] N. trait_[x] columns interpreted logicals N column give number samples combination studies. example, following specifications two traits equivalent. two traits, data frame format contains information matrix format. format required resample_inddata function (covered different vignette). sim_mv, either format sufficient.","code":"N <- matrix(c(60000, 30000, 30000, 60000), nrow = 2, ncol = 2) N #>       [,1]  [,2] #> [1,] 60000 30000 #> [2,] 30000 60000  Ndf <- data.frame(trait_1 = c(1, 1, 0),                    trait_2 = c(0, 1, 1),                    N = rep(30000, 3)) Ndf #>   trait_1 trait_2     N #> 1       1       0 30000 #> 2       1       1 30000 #> 3       0       1 30000"},{"path":"/articles/simulating_data.html","id":"using-sample-size-0-to-omit-traits","dir":"Articles","previous_headings":"Specifying Sample Size, Sample Overlap, and Environmental Correlation","what":"Using Sample Size 0 to Omit Traits","title":"Simulating Data","text":"circumstances, may want generate true effects trait generate summary statistics. case, can use sample size 0. Setting N = 0 mean beta_hat, s_estimate, se_beta_hat NA traits. Alternatively, N vector 0 elements, traits missing. Finally, N matrix, can set row column corresponding omitted trait zero. example, specification , omit summary statistics \\(Z\\), third trait. also specify overlapping samples studies three traits.","code":"N <- matrix(c(50000, 10000, 0, 0,                10000, 40000, 0, 10000,                0, 0, 0, 0,                0, 10000, 0, 20000), nrow = 4) N #>       [,1]  [,2] [,3]  [,4] #> [1,] 50000 10000    0     0 #> [2,] 10000 40000    0 10000 #> [3,]     0     0    0     0 #> [4,]     0 10000    0 20000 sim_dat2 <- sim_mv(G = G,                   N = N,                   J = 100000,                   h2 = c(0.3, 0.3, 0.5, 0.4),                    pi = 0.01,                   est_s = TRUE) #> SNP effects provided for 100000 SNPs and 4 traits. head(sim_dat2$beta_hat) #>               [,1]         [,2] [,3]          [,4] #> [1,]  1.258828e-03 -0.002383374   NA  1.074629e-02 #> [2,] -8.580051e-03 -0.015482893   NA -7.281355e-03 #> [3,] -2.515356e-03 -0.001070368   NA -2.189328e-02 #> [4,]  5.422213e-05 -0.003164621   NA  8.103383e-03 #> [5,] -8.150978e-03 -0.005807492   NA  5.922625e-05 #> [6,] -5.861632e-03 -0.003012872   NA  3.302201e-03 head(sim_dat2$se_beta_hat) #>             [,1]  [,2] [,3]        [,4] #> [1,] 0.004472136 0.005   NA 0.007071068 #> [2,] 0.004472136 0.005   NA 0.007071068 #> [3,] 0.004472136 0.005   NA 0.007071068 #> [4,] 0.004472136 0.005   NA 0.007071068 #> [5,] 0.004472136 0.005   NA 0.007071068 #> [6,] 0.004472136 0.005   NA 0.007071068 head(sim_dat2$s_estimate) #>             [,1]        [,2] [,3]        [,4] #> [1,] 0.004453566 0.004976698   NA 0.007050114 #> [2,] 0.004471810 0.005008104   NA 0.007081267 #> [3,] 0.004471716 0.004976063   NA 0.007033821 #> [4,] 0.004459041 0.004982154   NA 0.007068942 #> [5,] 0.004480086 0.004961544   NA 0.007006829 #> [6,] 0.004472674 0.004987358   NA 0.007045390"},{"path":"/articles/simulating_data.html","id":"understanding-genetic-and-environmental-covariance","dir":"Articles","previous_headings":"Specifying Sample Size, Sample Overlap, and Environmental Correlation","what":"Understanding Genetic and Environmental Covariance","title":"Simulating Data","text":"model used GWASBrewer, trait direct genetic component, direct environmental component, components effects traits DAG. example, four trait DAG working , underlying model really looks like : picture, \\(G_x\\), \\(G_y\\), \\(G_z\\), \\(G_w\\) direct genetic components trait \\(E_x\\), \\(E_y\\), \\(E_z\\), \\(E_w\\) direct environmental components. always assume direct genetic components independent environmental components. default, also assume environmental components independent (blue circles picture mutually independent). means , default, observational trait correlation explained completely specified DAG. case, default trait correlation simulation data object contains four matrices describe trait covarince, Sigma_E, total environmental trait covariance, Sigma_G total genetic trait covariance, trait_corr, trait correlation equal Sigma_G + Sigma_E, R, row correlation beta_hat. R equal trait_corr scaled matrix sample overlap proportions. Sigma_G always determined DAG heritabilities. Currently, two ways modify Sigma_E. first specify R_obs directly specifies observational trait correlation (trait_corr). cases, possible request observational correlation matrix impossible. example, example, \\(Z\\) strong negative effect \\(W\\) possible four traits mutually strongly positively correlated. can get error using quick way find desired observational correlation feasible compute R_obs - Sigma_G check matrix positive definite (.e. check positive eigenvalues). alternative way specify environmental correlation specify R_E gives total correlation environmental components, .e. cov2cor(Sigma_E). Importantly, R_E correlation total environmental components, direct environmental components shown graph . positive definite correlation matrix valid input R_E, use results total trait correlation currently possible specify correlation direct environmental components. Note environmental covariance observational trait correlation influence distribution summary statistics overlap GWAS samples. means sim_dat3 previous code block actually sample exactly distribution sim_dat1, specification sample overlap. can tell case sim_dat4$R identity, indicating summary statistics independent across traits. contrast, sim_dat2, sample overlap, non-zero correlation summary statistics.","code":"sim_dat1$trait_corr #>           X         Y          Z          W #> X 1.0000000 0.4959207  0.4467774  0.2967570 #> Y 0.4959207 1.0000000  0.2220017  0.3840097 #> Z 0.4467774 0.2220017  1.0000000 -0.3025824 #> W 0.2967570 0.3840097 -0.3025824  1.0000000 R_obs <- matrix(0.8, nrow = 4, ncol = 4) diag(R_obs) <- 1  wont_run <- sim_mv(G = G,                    J = 50000,                   N = 60000,                     h2 = c(0.3, 0.3, 0.5, 0.4),                    pi = 1000/50000,                    R_obs = R_obs ) #> Error in value[[3L]](cond): R_obs is incompatible with trait relationships and heritability. R_E <- matrix(0.8, nrow = 4, ncol = 4) diag(R_E) <- 1  sim_dat3 <- sim_mv(G = G,                    J = 50000,                   N = 60000,                     h2 = c(0.3, 0.3, 0.5, 0.4),                    pi = 1000/50000,                    R_E = R_E) #> SNP effects provided for 50000 SNPs and 4 traits. sim_dat3$trait_corr #>           X         Y         Z         W #> X 1.0000000 0.7109713 0.7020261 0.5677883 #> Y 0.7109713 1.0000000 0.5966303 0.6110510 #> Z 0.7020261 0.5966303 1.0000000 0.3158510 #> W 0.5677883 0.6110510 0.3158510 1.0000000 sim_dat3$R #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    0    0 #> [2,]    0    1    0    0 #> [3,]    0    0    1    0 #> [4,]    0    0    0    1 sim_dat2$R #>           [,1]      [,2] [,3]      [,4] #> [1,] 1.0000000 0.1120147    0 0.0000000 #> [2,] 0.1120147 1.0000000    0 0.1355998 #> [3,] 0.0000000 0.0000000    0 0.0000000 #> [4,] 0.0000000 0.1355998    0 1.0000000"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jean Morrison. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morrison J (2025). GWASBrewer: Simulate Realistic GWAS Summary Statistics. R package version 0.3.0.0237, https://github.com/jean997/GWASBrewer.","code":"@Manual{,   title = {GWASBrewer: Simulate Realistic GWAS Summary Statistics},   author = {Jean Morrison},   year = {2025},   note = {R package version 0.3.0.0237},   url = {https://github.com/jean997/GWASBrewer}, }"},{"path":"/index.html","id":"welcome","dir":"","previous_headings":"","what":"Welcome","title":"Simulate Realistic GWAS Summary Statistics","text":"Welcome GWASBrewer, flexible tool simulating realistic GWAS summary statistics one many traits wide range scenarios. package previously called simGWAS. Congratulations finding new home.","code":""},{"path":"/index.html","id":"simulate-realistic-gwas-summary-statistics-for-one-or-multiple-traits","dir":"","previous_headings":"","what":"Simulate Realistic GWAS Summary Statistics for One or Multiple Traits","title":"Simulate Realistic GWAS Summary Statistics","text":"GWASBrewer package simulates GWAS summary statistics. main function package sim_mv. Get started “Simulating Data” vignette. Briefly, GWASBrewer can simulate data following features. Data produced continuous traits user supplied linear causal relationships. GWAS multiple traits may overlapping samples. Data can generated without LD. One realistic LD pattern supplied built-data. GWAS trait can replicated different sample sizes, LD patterns, allele frequencies (see “Resampling Re-Scaling..” vignette) Data generated GWASBrewer can used testing variety methods including heritability estimation, Mendelian randomization, genetic correlation estimation, colocalization, fine mapping etc. package active development. features may added future include Support binary traits Ability add confounding effects","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate Realistic GWAS Summary Statistics","text":"install without vignettes, vignettes require two packages installed automatically. “Simulating Data” vignette requires DiagrammeR (use install.packages). Generating individual level data using resample_inddata (see “Resampling Rescaling…” vignette) requires hapsim package. package removed CRAN June 2025 can installed using devtools::install_github(\"CRAN/hapsim\").","code":"devtools::install_github(\"jean997/GWASBrewer\",  build_vignettes = TRUE) browseVignettes(\"GWASBrewer\") devtools::install_github(\"jean997/GWASBrewer\",  build_vignettes = FALSE)"},{"path":"/reference/GWASBrewer.html","id":null,"dir":"Reference","previous_headings":"","what":"GWASBrewer — GWASBrewer","title":"GWASBrewer — GWASBrewer","text":"Simulate GWAS summary statistics specified DAG factor structure.","code":""},{"path":"/reference/GWASBrewer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GWASBrewer — GWASBrewer","text":"Jean Morrison <jvmorr@umich.edu>","code":""},{"path":"/reference/R_LD_to_haplodat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert LD matrices to haplotype data — R_LD_to_haplodat","title":"Convert LD matrices to haplotype data — R_LD_to_haplodat","text":"Converts list LD matrices haplotype data.","code":""},{"path":"/reference/R_LD_to_haplodat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert LD matrices to haplotype data — R_LD_to_haplodat","text":"","code":"R_LD_to_haplodat(R_LD, af)"},{"path":"/reference/R_LD_to_haplodat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert LD matrices to haplotype data — R_LD_to_haplodat","text":"R_LD list LD matrices, matrix corresponding set loci. af vector allele frequencies corresponding loci `R_LD`.","code":""},{"path":"/reference/R_LD_to_haplodat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert LD matrices to haplotype data — R_LD_to_haplodat","text":"list haplotype data, element corresponds set loci.","code":""},{"path":"/reference/R_LD_to_haplodat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert LD matrices to haplotype data — R_LD_to_haplodat","text":"function formats LD matrices hapsim formatted input data.","code":""},{"path":"/reference/compute_h2.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute heritability from standardized or non-standardized effects — compute_h2","title":"Compute heritability from standardized or non-standardized effects — compute_h2","text":"Compute heritability standardized non-standardized effects","code":""},{"path":"/reference/compute_h2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute heritability from standardized or non-standardized effects — compute_h2","text":"","code":"compute_h2(   b_joint,   geno_scale = c(\"allele\", \"sd\"),   pheno_sd = 1,   R_LD = NULL,   af = NULL,   full_mat = FALSE )"},{"path":"/reference/compute_h2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute heritability from standardized or non-standardized effects — compute_h2","text":"b_joint matrix standardized non-standardized effects. Provide one options. geno_scale One allele sd, depending scale b_joint R_LD LD pattern (optional). See ?sim_mv details. af Allele frequencies (optional, allowed R_LD missing). See ?sim_mv details. full_mat TRUE, return full genetic variance-covariance matrix","code":""},{"path":"/reference/fast_eigen.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Eigen Decomposition using RcppArmadillo — fast_eigen","title":"Fast Eigen Decomposition using RcppArmadillo — fast_eigen","text":"Computes full eigen decomposition symmetric matrix using C++. function faster base R's `eigen()`. function check matrix numeric symmetric.","code":""},{"path":"/reference/fast_eigen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Eigen Decomposition using RcppArmadillo — fast_eigen","text":"","code":"fast_eigen(m)"},{"path":"/reference/fast_eigen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast Eigen Decomposition using RcppArmadillo — fast_eigen","text":"m symmetric numeric matrix.","code":""},{"path":"/reference/fast_eigen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast Eigen Decomposition using RcppArmadillo — fast_eigen","text":"list two components: `values` (eigenvalues) `vectors` (eigenvectors).","code":""},{"path":"/reference/fast_eigen_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Eigenvalues using RcppArmadillo — fast_eigen_vals","title":"Fast Eigenvalues using RcppArmadillo — fast_eigen_vals","text":"Computes eigen values symmetric matrix using C++. function check matrix numeric symmetric.","code":""},{"path":"/reference/fast_eigen_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Eigenvalues using RcppArmadillo — fast_eigen_vals","text":"","code":"fast_eigen_vals(m)"},{"path":"/reference/fast_eigen_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast Eigenvalues using RcppArmadillo — fast_eigen_vals","text":"m symmetric numeric matrix.","code":""},{"path":"/reference/fast_eigen_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast Eigenvalues using RcppArmadillo — fast_eigen_vals","text":"vector eigen values","code":""},{"path":"/reference/gen_bhat_from_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate beta hats from standardized or non-standardized direct SNP effects and LD — gen_bhat_from_b","title":"Generate beta hats from standardized or non-standardized direct SNP effects and LD — gen_bhat_from_b","text":"Generate beta hats standardized non-standardized direct SNP effects LD","code":""},{"path":"/reference/gen_bhat_from_b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate beta hats from standardized or non-standardized direct SNP effects and LD — gen_bhat_from_b","text":"","code":"gen_bhat_from_b(   b_joint,   N,   trait_corr = NULL,   R_LD = NULL,   R_LD_eigen = NULL,   af = NULL,   est_s = FALSE,   input_geno_scale = c(\"allele\", \"sd\"),   input_pheno_sd = 1,   output_geno_scale = c(\"allele\", \"sd\"),   output_pheno_sd = 1 )"},{"path":"/reference/gen_bhat_from_b.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate beta hats from standardized or non-standardized direct SNP effects and LD — gen_bhat_from_b","text":"b_joint Matrix joint effect sizes N Sample size, scalar, vector, matrix, data.frame. See ?sim_mv details. trait_corr Matrix population trait correlation (traits traits) R_LD LD pattern (optional). See ?sim_mv details. R_LD_eigen Optionally, also supply list eigen decompositions. program check matches R_LD. af Allele frequencies (optional, allowed R_LD missing). See ?sim_mv details. est_s Estimate standard errors? input_geno_scale Genotype scale effects  b_joint input_pheno_sd Phenotype sd effects b_joint output_geno_scale Output genotype scale output_pheno_sd Output phenotype sd","code":""},{"path":"/reference/gen_bhat_from_b.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate beta hats from standardized or non-standardized direct SNP effects and LD — gen_bhat_from_b","text":"made internal function. resample summary statistics use resample_sumstats.","code":""},{"path":"/reference/gen_gwas_from_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate GWAS data from standardized or non-standardized direct SNP effects and LD — gen_gwas_from_b","title":"Generate GWAS data from standardized or non-standardized direct SNP effects and LD — gen_gwas_from_b","text":"Generate GWAS data standardized non-standardized direct SNP effects LD","code":""},{"path":"/reference/gen_gwas_from_b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate GWAS data from standardized or non-standardized direct SNP effects and LD — gen_gwas_from_b","text":"","code":"gen_gwas_from_b(   b_joint_std,   b_joint,   N,   V_E,   R_E = NULL,   R_LD = NULL,   af = NULL,   sim_func = gen_genos_mvn,   calc_sumstats = TRUE )"},{"path":"/reference/gen_gwas_from_b.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate GWAS data from standardized or non-standardized direct SNP effects and LD — gen_gwas_from_b","text":"b_joint_std Matrix standardized joint (causal) effects (dimension variants traits) b_joint Matrix non-standardized joint (causal) effects (dimension variants traits). Supply one b_joint b_joint_std. N Sample size, scalar, vector, special sample size format data frame, see details. V_E Vector length equal number traits giving environmental variance trait. R_E Environmental correlation matrix, (traits traits). missing, R_E assumed identity. R_LD LD pattern (optional). See ?sim_mv details. af Allele frequencies. can scalar, vector function. function, af must always supplied.","code":""},{"path":"/reference/gen_gwas_from_b.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate GWAS data from standardized or non-standardized direct SNP effects and LD — gen_gwas_from_b","text":"function can used generate individual level GWAS data passing beta_joint table data set simulated using `sim_mv`. original data generated af missing LD beta_joint table contains standardized effects. Otherwise contains non-standardized effects. Use appropriate argument, either b_joint_std b_joint.","code":""},{"path":"/reference/gen_gwas_from_b.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate GWAS data from standardized or non-standardized direct SNP effects and LD — gen_gwas_from_b","text":"","code":"# Use gen_gwas_from_b to generate individual level data with given effect size. Ndf <- data.frame(trait_1 = 1, trait_2 = 1, N = 10000) G <- matrix(0, nrow = 2, ncol = 2) R_E <- matrix(c(1, 0.8, 0.8, 1), nrow = 2, ncol = 2) # original data dat <- sim_mv(N = Ndf, J = 2000, h2 = c(0.4, 0.3), pi = 100/2000,                G = G, R_E = R_E, af = function(n){rbeta(n, 1, 5)}) #> SNP effects provided for 2000 SNPs and 2 traits. # Now generate GWAS data gw_dat <- gen_gwas_from_b(b_joint = dat$beta_joint, N = Ndf, V_E = c(0.6, 0.7),                            R_E = R_E, af = dat$snp_info$AF, calc_sumstats = TRUE) #> SNP effects provided for 2000 SNPs and 2 traits."},{"path":"/reference/generate_random_F.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random F — generate_random_F","title":"Generate random F — generate_random_F","text":"Generate random F","code":""},{"path":"/reference/generate_random_F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random F — generate_random_F","text":"","code":"generate_random_F(   K,   M,   g_F = function(n) {      stats::runif(n, -1, 1)  },   nz_factor,   omega,   h2_trait,   pad = FALSE )"},{"path":"/reference/generate_random_F.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random F — generate_random_F","text":"g_F Function non-zero elements F generated nz_factor Number non-zero elements factor F generated. omega Proportion trait heritability explained factors h2_trait Trait heritability pad Add single trait factors? (See details)","code":""},{"path":"/reference/generate_random_F.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random F — generate_random_F","text":"matrix","code":""},{"path":"/reference/generate_random_F.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random F — generate_random_F","text":"Generate random set (least) K factors M traits. number traits affected factor given nz_factor. effect chosen random draw function g_F. rows resulting matrix corresponding non-zero elements omega zero pad  = TRUE, single-trait factors added. Finally, matrix re-scaled colSums(F_mat^2) = omega*h2_trait.","code":""},{"path":"/reference/hapsim_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate haplotype data from a haplotype object — hapsim_simple","title":"Generate haplotype data from a haplotype object — hapsim_simple","text":"Generates haplotype data haplotype object.","code":""},{"path":"/reference/hapsim_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate haplotype data from a haplotype object — hapsim_simple","text":"","code":"hapsim_simple(n, hap, seed = NULL)"},{"path":"/reference/hapsim_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate haplotype data from a haplotype object — hapsim_simple","text":"n number haplotypes generate. hap haplotype object containing allele frequencies covariance matrix. seed optional seed reproducibility.","code":""},{"path":"/reference/hapsim_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate haplotype data from a haplotype object — hapsim_simple","text":"matrix haplotype data, rows correspond haplotypes columns loci.","code":""},{"path":"/reference/hapsim_simple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate haplotype data from a haplotype object — hapsim_simple","text":"function generates haplotype data based allele frequencies covariance matrix provided `hap` object. uses multivariate normal distribution generate haplotypes.","code":""},{"path":"/reference/hapsim_simple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate haplotype data from a haplotype object — hapsim_simple","text":"","code":"# Example usage: hap <- list(freqs = c(0.1, 0.2), cov = matrix(c(1, 0.5, 0.5, 1), nrow = 2)) hapsim_simple(n = 10, hap = hap, seed = 123) #> Error in hapsim_simple(n = 10, hap = hap, seed = 123): could not find function \"hapsim_simple\""},{"path":"/reference/resample_inddata.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample individual level data with joint effects matching a sim_mv object — resample_inddata","title":"Sample individual level data with joint effects matching a sim_mv object — resample_inddata","text":"Sample individual level data joint effects matching sim_mv object","code":""},{"path":"/reference/resample_inddata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample individual level data with joint effects matching a sim_mv object — resample_inddata","text":"","code":"resample_inddata(   N,   dat = NULL,   genos = NULL,   J = NULL,   R_LD = NULL,   af = NULL,   sim_func = gen_genos_mvn,   new_env_var = NULL,   new_h2 = NULL,   new_R_E = NULL,   new_R_obs = NULL,   calc_sumstats = FALSE )"},{"path":"/reference/resample_inddata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample individual level data with joint effects matching a sim_mv object — resample_inddata","text":"N Sample size, scalar, vector, special sample size format data frame, see details. dat object class sim_mv (produced sim_mv). `dat` omitted, function generate matrix genotypes . `dat` provided, phenotypes traits `dat` also included. genos Optional matrix pre-generated genotypes. genos supplied, resample_inddata generate phenotypes. J Optional number variants. J required dat missing. R_LD LD pattern (optional). See ?sim_mv details. af Allele frequencies. af required unless unless genos supplied. new_env_var Optional. environmental variance new population. missing function assume environmental variance old population. new_h2 Optional. heritability new population. Provide one new_env_var new_h2. new_R_E Optional, specify environmental correlation new population. missing, function assume environmental correlation original data. new_R_obs Optional, specify overall trait correlation new population. Specify one new_R_E new_R_obs. missing, function assume environmental correlation original data. calc_sumstats TRUE, associations genotypes phenotypes calculated returned.","code":""},{"path":"/reference/resample_inddata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample individual level data with joint effects matching a sim_mv object — resample_inddata","text":"function can used generate individual level genotype phenotype data. can used three modes: generate genotype data : sim_mv object needs included. Supply N single integer number individuals, J number variants, af, R_LD desired. parameters relevant phenotype, supplied, get error. returned object include N x J matrix genotypes vector allele frequencies. generate genotype phenotype data: Supply dat (sim_mv object) leave genos missing. N af required options optional. generate phenotype data : Supply dat (sim_mv object) provide matrix genotypes genos argument. number rows genos must equal total number individuals implied N. example, two traits 10 samples overlap, genos 20 rows. R_LD af arguments contain population LD allele frequencies used produce genotypes. used compute genetic variance-covariance matrix. N af required options optional.","code":""},{"path":"/reference/resample_inddata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample individual level data with joint effects matching a sim_mv object — resample_inddata","text":"","code":"# Use resample_inddata to generate genotypes only simple_ld <- matrix(0.5, nrow = 5, ncol = 5) diag(simple_ld) <- 1 genos_only <- resample_inddata(N = 8,                                J = 20,                                R_LD = list(simple_ld),                                af = rep(0.3, 5)) #> Generating genotype matrix only. # generate genotypes and phenotypes dat <- sim_mv(N = 0,               G = 1,               J = 20,               pi = 0.5,               h2 = 0.05,               R_LD = list(simple_ld),               af = rep(0.3, 5)) #> SNP effects provided for 20 SNPs and 1 traits. genos_and_phenos <- resample_inddata(dat = dat,                                       N = 8,                                       R_LD = list(simple_ld),                                       af = rep(0.3, 5)) #> Generating both genotypes and phenotypes. #> SNP effects provided for 20 SNPs and 1 traits. #> I will assume that the environmental variance is the same in the old and new population. #> I will assume that environmental correlation is the same in the old and new population. Note that this could result in different overall trait correlations. # generate phenos only phenos_only <- resample_inddata(dat = dat,                                 genos = genos_only$X,                                 N = 8,                                 R_LD = list(simple_ld),                                 af = rep(0.3, 5)) #> Generating phenotypes only. #> SNP effects provided for 20 SNPs and 1 traits. #> I will assume that the environmental variance is the same in the old and new population. #> I will assume that environmental correlation is the same in the old and new population. Note that this could result in different overall trait correlations."},{"path":"/reference/resample_sumstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample Summary Statistics for Existing Simulation Object — resample_sumstats","title":"Resample Summary Statistics for Existing Simulation Object — resample_sumstats","text":"Resample Summary Statistics Existing Simulation Object","code":""},{"path":"/reference/resample_sumstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample Summary Statistics for Existing Simulation Object — resample_sumstats","text":"","code":"resample_sumstats(   dat,   N,   R_LD = NULL,   af = NULL,   est_s = FALSE,   geno_scale = NULL,   new_env_var = NULL,   new_h2 = NULL,   new_R_E = NULL,   new_R_obs = NULL )"},{"path":"/reference/resample_sumstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample Summary Statistics for Existing Simulation Object — resample_sumstats","text":"dat Object output sim_mv N Sample size, scalar, vector, matrix. See ?sim_mv details. R_LD LD pattern (optional). See ?sim_mv details. af Allele frequencies. See ?sim_mv details. est_s Logical, estimates se(beta_hat) produced. geno_scale Either \"allele\" \"sd\". Specifies scale effect sizes output data. new_env_var Optional. environmental variance new population. missing function assume environmental variance old population. new_h2 Optional. heritability new population. Provide one new_env_var new_h2. new_R_E Optional, specify environmental correlation new population. missing, function assume environmental correlation original data. new_R_obs Optional, specify overall trait correlation new population. Specify one new_R_E new_R_obs. missing, function assume environmental correlation original data.","code":""},{"path":"/reference/resample_sumstats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resample Summary Statistics for Existing Simulation Object — resample_sumstats","text":"function can used generate new summary statistics existing simulation object. discussion function resample_inddata, see \"Resampling\" vignette.","code":""},{"path":"/reference/resample_sumstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample Summary Statistics for Existing Simulation Object — resample_sumstats","text":"","code":"# Use resample_sumstats to generate new GWAS results with the same effect sizes. N <- matrix(1000, nrow = 2, ncol =2) G <- matrix(0, nrow = 2, ncol = 2) R_E <- matrix(c(1, 0.8, 0.8, 1), nrow = 2, ncol = 2) # original data dat <- sim_mv(N = N, J = 20000, h2 = c(0.4, 0.3), pi = 1000/20000,                G = G, R_E = R_E) #> SNP effects provided for 20000 SNPs and 2 traits. # data for second GWAS dat_new <- resample_sumstats(dat,                              N = 40000) #> I will assume that the environmental variance is the same in the old and new population. #> I will assume that environmental correlation is the same in the old and new population. Note that this could result in different overall trait correlations. #> Original data have effects on the per-genotype sd scale. I will assume that per-genotype sd effects are the same in the new and old populations. #> SNP effects provided for 20000 SNPs and 2 traits."},{"path":"/reference/rescale_sumstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-Scale Effects of a Simulation Object — rescale_sumstats","title":"Re-Scale Effects of a Simulation Object — rescale_sumstats","text":"Re-Scale Effects Simulation Object","code":""},{"path":"/reference/rescale_sumstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-Scale Effects of a Simulation Object — rescale_sumstats","text":"","code":"rescale_sumstats(   dat,   output_geno_scale = c(\"allele\", \"sd\"),   output_pheno_sd = 1,   af = NULL,   verbose = TRUE )"},{"path":"/reference/rescale_sumstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-Scale Effects of a Simulation Object — rescale_sumstats","text":"dat sim_mv object output_geno_scale Desired genotype scale output. Either \"allele\" \"sd\". output_pheno_sd Desired sd phenotype, scalar vector length equal number traits. af converting sd allele scale, provide vector allele frequencies. verbose Print messages?","code":""},{"path":"/reference/rescale_sumstats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Re-Scale Effects of a Simulation Object — rescale_sumstats","text":"function can used change genotype phenotype scaling. check scaling current object, look gneo_scale pheno_sd elements. current object already allele scale desire output also allele scale, supply af (generate error). convert \"allele\" scale object \"sd\" scale object, allele frequencies remoed.","code":""},{"path":"/reference/rescale_sumstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-Scale Effects of a Simulation Object — rescale_sumstats","text":"","code":"# generate an initial data set N <- matrix(10000, nrow = 2, ncol =2) G <- matrix(c(0, 0.5, 0, 0), nrow = 2, ncol = 2) dat <- sim_mv(N = N,               G = G,               J = 20000,               h2 = c(0.4, 0.3),               pi = 1000/20000,               af = function(n){rbeta(n, 1, 5)}) #> SNP effects provided for 20000 SNPs and 2 traits. # check scaling dat$geno_scale # \"allele\" #> [1] \"allele\" dat$pheno_sd # 1 1 #> [1] 1 1  # rescale phenotypes and convert to per-sd scale dat2 <- rescale_sumstats(dat = dat,                         output_geno_scale = \"sd\",                         output_pheno_sd = c(1.5, 0.3))"},{"path":"/reference/rnormalmix.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from a normal mixture distribution — rnormalmix","title":"Simulate from a normal mixture distribution — rnormalmix","text":"Simulate normal mixture distribution","code":""},{"path":"/reference/rnormalmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from a normal mixture distribution — rnormalmix","text":"","code":"rnormalmix(n, sd, pi, mu = 0, return.Z = FALSE)"},{"path":"/reference/rnormalmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from a normal mixture distribution — rnormalmix","text":"n Number points simulate pi Mixture proportions mu Means return.Z TRUE, also return vector indicators indicating K classes sample belongs sigma Standard deviations","code":""},{"path":"/reference/rnormalmix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from a normal mixture distribution — rnormalmix","text":"return.Z=TRUE, returns list elements beta (samples) Z (indicators). Otherwise returns length n vector samples.","code":""},{"path":[]},{"path":"/reference/simGWAS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"simGWAS — simGWAS","text":"Jean Morrison <jvmorr@umich.edu>","code":""},{"path":"/reference/sim_extract_ld.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract LD matrix from simulated data — sim_extract_ld","title":"Extract LD matrix from simulated data — sim_extract_ld","text":"Extract LD matrix specific variants simulated data set","code":""},{"path":"/reference/sim_extract_ld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract LD matrix from simulated data — sim_extract_ld","text":"","code":"sim_extract_ld(dat, index, R_LD)"},{"path":"/reference/sim_extract_ld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract LD matrix from simulated data — sim_extract_ld","text":"dat Simulation object produced `sim_mv` index vector indices snps extract LD R_LD List eigen-decompositions used original simulation","code":""},{"path":"/reference/sim_extract_ld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract LD matrix from simulated data — sim_extract_ld","text":"LD matrix. SNP order matches original index order","code":""},{"path":"/reference/sim_extract_ld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract LD matrix from simulated data — sim_extract_ld","text":"","code":"data(\"ld_mat_list\") data(\"AF\") # Two traits with no causal relationship, non-overlapping GWAS # Set N = 0 so no summary statistics are produced set.seed(1) G <- matrix(0, nrow = 2, ncol = 2) dat <- sim_mv(N = 0, J = 1000, h2 = c(0.04, 0.03), pi = 0.1,                G = G,  R_LD = ld_mat_list, af = AF) #> SNP effects provided for 1000 SNPs and 2 traits.  # extract ld matrix for all variants with p-value for trait 1 less than 1e-5 index <- c(1:20, 500:515) ld_mat <- sim_extract_ld(dat, index, ld_mat_list)"},{"path":"/reference/sim_ld_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve LD proxies — sim_ld_proxy","title":"Retrieve LD proxies — sim_ld_proxy","text":"Retrieve LD proxies","code":""},{"path":"/reference/sim_ld_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve LD proxies — sim_ld_proxy","text":"","code":"sim_ld_proxy(dat, index, R_LD, r2_thresh = 0.64, return_mat = FALSE)"},{"path":"/reference/sim_ld_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve LD proxies — sim_ld_proxy","text":"dat Simulation object produced `sim_mv` index list indexes retrieve proxies R_LD LD pattern used generate dat r2_thresh Get proxies r^2 >= r2_thresh one index variants return_mat TRUE, return correlation matrix index variant proxies. matrix, index variant always corresponds first row/column proxies order returned.","code":""},{"path":"/reference/sim_ld_prune.html","id":null,"dir":"Reference","previous_headings":"","what":"LD prune simulated data — sim_ld_prune","title":"LD prune simulated data — sim_ld_prune","text":"LD prune simulated data","code":""},{"path":"/reference/sim_ld_prune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LD prune simulated data — sim_ld_prune","text":"","code":"sim_ld_prune(dat, pvalue, R_LD, r2_thresh = 0.1, pval_thresh = 1)"},{"path":"/reference/sim_ld_prune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LD prune simulated data — sim_ld_prune","text":"dat Data object produced sim_mv pvalue Either vector used prioritize variants integer. pvalue integer, , variants priorized p-value trait . pvalue missing, variants prioritized randomly. R_LD LD pattern used generate dat r2_thresh r^2 threshold pruning pval_thresh p-value threshold pruning (see details)","code":""},{"path":"/reference/sim_ld_prune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LD prune simulated data — sim_ld_prune","text":"vector indices corresponding LD-pruned variant set.","code":""},{"path":"/reference/sim_ld_prune.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LD prune simulated data — sim_ld_prune","text":"Given results sim_mv, vector p-values, function return list variants p < pval_thresh mutually squared correlation less r2_thresh.","code":""},{"path":"/reference/sim_ld_prune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LD prune simulated data — sim_ld_prune","text":"","code":"data(\"ld_mat_list\") data(\"AF\")  # Two traits with no causal relationship, non-overlapping GWAS set.seed(1) G <- matrix(0, nrow = 2, ncol = 2) dat <- sim_mv(N = 10000, J = 1000, h2 = c(0.04, 0.03), pi = 0.1,                G = G,  R_LD = ld_mat_list, af = AF) #> SNP effects provided for 1000 SNPs and 2 traits.  # prune on p-value for first trait pvals <- 2*pnorm(-abs(dat$beta_hat/dat$se_beta_hat)) prune_set_1 <- sim_ld_prune(dat, pvalue = pvals[,1], R_LD = ld_mat_list, pval_thresh = 1e-5) # Above is equivalent to prune_set_1 <- sim_ld_prune(dat, pvalue = 1, R_LD = ld_mat_list, pval_thresh = 1e-5) #> Prioritizing variants based on p-value for trait 1"},{"path":"/reference/sim_lf.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate summary statistics — sim_lf","title":"Simulate summary statistics — sim_lf","text":"Simulate summary statistics specified factor structure","code":""},{"path":"/reference/sim_lf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate summary statistics — sim_lf","text":"","code":"sim_lf(   F_mat,   N,   J,   h2_trait,   omega,   h2_factor,   pi_L,   pi_theta,   est_s = FALSE,   R_E = NULL,   R_obs = NULL,   R_LD = NULL,   R_LD_eigen = NULL,   af = NULL,   sporadic_pleiotropy = TRUE,   h2_exact = FALSE,   pi_exact = FALSE,   snp_effect_function_L = \"normal\",   snp_effect_function_theta = \"normal\",   snp_info = NULL )"},{"path":"/reference/sim_lf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate summary statistics — sim_lf","text":"F_mat factor matrix M K (M = number traits, K = number factors) N GWAS sample size. N can scalar, vector, matrix. N scalar, GWAS sample size overlap studies. N vector, element N specifies sample size corresponding GWAS overlap studies. N matrix, N_ii specifies sample size study N_ij specifies number samples present study study j. elements N must positive non-integer values generate error. J Total number SNPs generate h2_trait Heritability trait. Length M vector. omega Proportion trait heritability mediated factors. Length M vector. h2_factor Heritability factor. Length K vector. pi_L Proportion non-zero elements L_k. Length K factor pi_theta Proportion non-zero elements theta. Scalar length M vector. est_s TRUE, return estimates se(beta_hat). R_E Correlation environmental trait components mediated factors. M M pd matrix. R_obs Observational correlation traits. M M pd matrix. one R_E R_obs can specified. R_LD List LD blocks. R_LD class list. element R_LD can either ) matrix, b) sparse matrix (class dsCMatrix) c) eigen decomposition (class eigen). elements correlation matrices, meaning 1 diagonal positive definite. R_LD_eigen Optionally, also supply list eigen decompositions. program check matches R_LD. af Optional vector allele frequencies. R_LD supplied, af can scalar, vector function. af function take single argument (n) return vector n allele frequencies (See Examples). R_LD supplied, af must vector length equal size supplied LD pattern (See Examples). sporadic_pleiotropy Allow sporadic pleiotropy traits. Defaults TRUE. h2_exact TRUE, heritability trait exactly h2. pi_exact TRUE, number direct effect SNPs trait exactly equal round(pi*J). snp_effect_function_L, snp_effect_function_theta Optional function generate variant effects L theta. snp_effect_function_L/theta can single function list functions length equal number factors/number traits. snp_info Optional data.frame variant information passed variant effect functions. R_LD specified, snp_info number rows equal size supplied LD pattern. Otherwise snp_info J rows.","code":""},{"path":"/reference/sim_lf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate summary statistics — sim_lf","text":"function generate GWAS summary statistics M traits K common factors. matrix F_mat provides effects factor trait, F_mat[,j] gives effect factor j trait . rows F_mat scaled order provide desired proportion heritability trait explained factors relative size sign elements within rows retained. random factor matrix can generated using generate_random_F (see Examples). possible supply non-feasible set parameters. Usually occurs heritability factors low heritability traits high leading contradiction. function return error happens. Trait covariance: trait composed four independent components, genetic component mediated factors, environmental component mediated factors, genetic component mediated factors, environmental component mediated factors. Therefore, total trait covariance can decomposed sum four corresponding covariance matrices. $$Cov(T) = Sigma_{FG} + Sigma_{FE} + Sigma_{GDir} + Sigma_{EDir}$$ assume cross-trait genetic sharing explained factors \\(Sigma_{GDir}\\) diagonal. factor sum genetic component environmental components factors independent (genetic environmental components) independent across factors. means \\(Sigma_{FG} = F S_{FG} F^T\\) \\(Sigma_{FE} = F S_{FE} F^T\\) \\(S_{FG}\\) \\(S_{FE}\\) diagonal matrices. parameter R_E specifies correlation residual environmental component (.e. \\(R_E = cov2cor(Sigma_{EDir}\\)). Alternatively, R_obs specified, \\(Sigma_{EDir}\\) chosen give desired observational correlation. returned object, Sigma_G equal sum two genetic covariance components Sigma_E equal sum two environmental components. R gives overall trait correlation matrix multiplied overlap proportion matrix, equal correlation error terms beta_hat (See Examples).","code":""},{"path":"/reference/sim_lf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate summary statistics — sim_lf","text":"","code":"myF <- generate_random_F(K = 3, M = 10, nz_factor = c(2, 3, 2),                         omega = rep(0.8, 10),                         h2_trait = rep(0.6, 10), pad = TRUE) dat <- sim_lf(myF, N = 10000, J = 20000, h2_trait = rep(0.6, 10),                       omega = rep(0.8, 10), pi_L = 0.1, pi_theta = 0.1) #> SNP effects provided for 20000 SNPs and 10 traits.  myF <- diag(2) N <- matrix(c(10000, 8000, 8000, 10000), nrow = 2) R_E <- matrix(c(1, 0.6, 0.6, 1), nrow = 2) dat <- sim_lf(F_mat = myF, N = N, J = 20000, h2_trait = rep(0.6, 2),              omega = rep(1, 2), h2_factor = rep(1, 2),              pi_L = 0.1, pi_theta = 0.1, R_E = R_E) #> SNP effects provided for 20000 SNPs and 2 traits. dat$R #>           [,1]      [,2] #> [1,] 1.0000000 0.1846886 #> [2,] 0.1846886 1.0000000 cor(dat$beta_hat[,1]-dat$beta_joint[,1], dat$beta_hat[,2]-dat$beta_joint[,2]) #> [1] 0.1809276"},{"path":"/reference/sim_mv.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate multivariate GWAS data — sim_mv","title":"Simulate multivariate GWAS data — sim_mv","text":"Simulate multivariate GWAS data","code":""},{"path":"/reference/sim_mv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate multivariate GWAS data — sim_mv","text":"","code":"sim_mv(   N,   J,   h2,   pi,   G = 0,   est_s = FALSE,   R_obs = NULL,   R_E = NULL,   R_LD = NULL,   R_LD_eigen = NULL,   af = NULL,   snp_effect_function = \"normal\",   snp_info = NULL,   sporadic_pleiotropy = TRUE,   pi_exact = FALSE,   h2_exact = FALSE )"},{"path":"/reference/sim_mv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate multivariate GWAS data — sim_mv","text":"N GWAS sample size. N can scalar, vector, matrix. N scalar, GWAS sample size overlap studies. N vector, element N specifies sample size corresponding GWAS overlap studies. N matrix, N_ii specifies sample size study N_ij specifies number samples present study study j. elements N must positive non-integer values generate error. J Number variants simulate h2 scalar vector giving heritability trait. pi scalar vector giving expected proportion direct effect SNPs trait. G Matrix direct effects. Rows correspond '' trait columns correspond '' trait, G[1,2] direct effect trait 1 trait 2. G 0 diagonal. est_s TRUE, return estimates se(`beta_hat`). FALSE, exact standard error `beta_hat` returned. Defaults FALSE. R_obs Total observational correlation traits. R_obs impact summary statistics unless sample overlap. See Details default behavior. R_E Total correlation environmental components traits. Use one R_obs R_E. R_E may phased future. R_LD Optional list LD blocks. R_LD class list. element R_LD can either ) matrix, b) sparse matrix (class dsCMatrix) c) eigen decomposition (class eigen). elements correlation matrices, meaning 1 diagonal positive definite. See Details vignettes. R_LD_eigen Optionally, also supply list eigen decompositions. program check matches R_LD. af Optional vector allele frequencies. R_LD supplied, af can scalar, vector function. af function take single argument (n) return vector n allele frequencies (See Examples). R_LD supplied, af must vector length equal size supplied LD pattern (See Examples). snp_effect_function Optional function generate variant effects. snp_effect_function can single function list functions length equal number traits (see Details). snp_info Optional data.frame variant information passed variant effect functions. R_LD specified, snp_info number rows equal size supplied LD pattern. Otherwise snp_info J rows. sporadic_pleiotropy Allow sporadic pleiotropy traits. Defaults TRUE. pi_exact TRUE, number direct effect SNPs trait exactly equal round(pi*J). h2_exact TRUE, heritability trait exactly `h2`. return_dat Useful development option, recommend general users.","code":""},{"path":"/reference/sim_mv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate multivariate GWAS data — sim_mv","text":"list following elements: Simulated effect estimates standard errors contained matrices + beta_hat: Effect estimates trait + se_beta_hat Standard error effect estimates, equal sqrt(1/N_m *Var(G_j)). + s_estimate Estimate se_beta_hat. Present est_s = TRUE. Four matrices contain direct total marginal joint SNP-trait associations: + direct_SNP_effects_marg direct_SNP_effects_joint give direct effects SNPs traits. LD. LD, direct_SNP_effects_marg direct component expected marginal association. + beta_marg beta_joint give total SNP effects (direct indirect). LD. LD, beta_marg total expected marginal association. .e. beta_marg expected value beta_hat. Four matrices describe covariance traits row correlation effect estimates + Sigma_G Genetic variance-covariance matrix. Diagonal elements equal heritability. + Sigma_E Environmental variance-covariance matrix. + trait_corr Population correlation traits. trait_corr = Sigma_G + Sigma_E. + R Row correlation beta_hat - beta_marg, equal trait_corr scaled overlap proportion matrix. Finally, + snp_info data frame variant information. R_LD omitted, snp_info contains allele frequency variant. R_LD included, snp_info also contains block replicate information well information supplied snp_info input parameter.","code":""},{"path":"/reference/sim_mv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate multivariate GWAS data — sim_mv","text":"function generates GWAS summary statistics linear SEM specified matrix G. previous \"xyz\" mode now deprecated. used using function xyz mode, can generate corresponding G using xyz_to_G function (see examples). G square (#traits #traits) matrix 0s diagonal. traits variance 1, G[,j]^2 proportion variance trait j explained direct effect trait . get error specify cyclic DAG. also combinations DAG heritability impossible give error. example two trait DAG trait 1 effect \\(x\\) trait 2, trait 1 heritability \\(h^2_1\\), trait 2 must heritability least \\((x^2)*(h^2_1)\\). generate data LD, supply R_LD can list matrices, sparse matrices, eigen-decompositions. matrices interpreted blocks block-diagonal LD matrix. af argument must provided vector length equal total size LD pattern (sum sizes block). R_LD need size J. LD pattern repeated subset necessary generate desired number variants. R_obs NULL (default value), assume direct environmental effects trait independent environmental correlation results relationships specified G. Alternatively R_obs can positive definite correlation matrix. snp_effect_function argument supplies custom function generate standardized direct variant effects. default, standardized direct effects generated normal distribution. means default mode, variants equal expected heritability explained regardless allele frequency features. function(s) passed snp_effect_function override default. function take three arguments, n, sd, snp_info. output vector length n expected total sum squares equal sd^2. Note: Even though final effects returned usually per-allele scale, snp_effect_function return standardized (per-sd) effect sizes.","code":""},{"path":"/reference/sim_mv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate multivariate GWAS data — sim_mv","text":"","code":"# Two traits with no causal relationship and some environmental correlation # specify completely overlapping GWAS N <- matrix(1000, nrow = 2, ncol =2) R_obs <- matrix(c(1, 0.3, 0.3, 1), nrow = 2, ncol = 2) dat <- sim_mv(G = 2, N = N, J = 20000, h2 = c(0.4, 0.3), pi = 1000/20000,                R_obs = R_obs) #> SNP effects provided for 20000 SNPs and 2 traits. dat$R # This is the true correlation of the estimation error of beta_hat #>      [,1] [,2] #> [1,]  1.0  0.3 #> [2,]  0.3  1.0 cor(dat$beta_hat - dat$beta_marg) # Should be similar to dat$R #>           [,1]      [,2] #> [1,] 1.0000000 0.2935818 #> [2,] 0.2935818 1.0000000  # The af argument can be a scalar, vector, or function. dat <- sim_mv(N = N, J = 20000, h2 = c(0.4, 0.3), pi = 1000/20000,                G = 2, R_obs = R_obs, af = function(n){rbeta(n = n, 1, 5)}) #> SNP effects provided for 20000 SNPs and 2 traits.  # A very simple example with LD # Use a pattern of two small blocks of LD A1 <- matrix(0.7, nrow = 10, ncol = 10) diag(A1) <- 1 A2 <- matrix(0.1, nrow = 6, ncol = 6) diag(A2) <- 1 # If using LD, af should have the same size as the LD pattern af <- runif(n = 16) dat <- sim_mv(N = N, J = 20000, h2 = c(0.4, 0.3), pi = 1000/20000,                G = 2, R_obs = R_obs, R_LD = list(A1, A2), af = af) #> SNP effects provided for 20000 SNPs and 2 traits.  # Use xyz_to_G to generate G from xyz specification myG <- xyz_to_G(tau_xz = c(0.2, -0.3), tau_yz = c(0.1, 0.25),         dir_xz = c(1, -1), dir_yz = c(1,1), gamma = 0) # If N is a scalar or a vector, there is no sample overlap dat <- sim_mv(N = 10000, J = 20000, h2 = rep(0.4, 4),               pi = c(500, 500, 1000, 1000)/20000,               G = myG) #> SNP effects provided for 20000 SNPs and 4 traits. plot(dat$beta_marg[,3], dat$beta_marg[,1]) abline(0, dat$total_trait_effects[3,1])"},{"path":"/reference/sim_mv_determined.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate multivariate GWAS Data with Specified Direct Effects — sim_mv_determined","title":"Simulate multivariate GWAS Data with Specified Direct Effects — sim_mv_determined","text":"Simulate multivariate GWAS Data Specified Direct Effects","code":""},{"path":"/reference/sim_mv_determined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate multivariate GWAS Data with Specified Direct Effects — sim_mv_determined","text":"","code":"sim_mv_determined(   N,   direct_SNP_effects_joint,   geno_scale,   pheno_sd,   G = 0,   est_s = FALSE,   R_obs = NULL,   R_E = NULL,   R_LD = NULL,   af = NULL )"},{"path":"/reference/sim_mv_determined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate multivariate GWAS Data with Specified Direct Effects — sim_mv_determined","text":"N GWAS sample size. N can scalar, vector, matrix. N scalar, GWAS sample size overlap studies. N vector, element N specifies sample size corresponding GWAS overlap studies. N matrix, N_ii specifies sample size study N_ij specifies number samples present study study j. elements N must positive non-integer values generate error. direct_SNP_effects_joint Matrix direct variant effects. variants traits. geno_scale Genotype scale provided effects. Either \"allele\" \"sd\". pheno_sd Phenotype standard deviation, scalar vector length number traits. G Matrix direct effects. Rows correspond '' trait columns correspond '' trait, G[1,2] direct effect trait 1 trait 2. G 0 diagonal. sure G scale effect sizes. est_s TRUE, return estimates se(`beta_hat`). FALSE, exact standard error `beta_hat` returned. Defaults FALSE. R_obs Total observational correlation traits. R_obs impact summary statistics unless sample overlap. See Details default behavior. R_E Total correlation environmental components . R_E R_obs alternative methods specifying trait correlation. Use one two options. R_E may phased future. R_LD Optional list LD blocks. R_LD class list. element R_LD can either ) matrix, b) sparse matrix (class dsCMatrix) c) eigen decomposition (class eigen). elements correlation matrices, meaning 1 diagonal positive definite. See Details vignettes. af Optional vector allele frequencies. R_LD supplied, af can scalar, vector function. af function take single argument (n) return vector n allele frequencies (See Examples). R_LD supplied, af must vector length equal size supplied LD pattern (See Examples).","code":""},{"path":"/reference/sim_mv_determined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate multivariate GWAS Data with Specified Direct Effects — sim_mv_determined","text":"sim_mv function. See ?sim_mv details.","code":""},{"path":"/reference/sim_mv_determined.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate multivariate GWAS Data with Specified Direct Effects — sim_mv_determined","text":"wrapper sim_mv. See ?sim_mv \"Providing Exact Set Direct Effects\" section Effect Size vignette.","code":""},{"path":"/reference/sim_mv_determined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate multivariate GWAS Data with Specified Direct Effects — sim_mv_determined","text":"","code":"G <- matrix(c(0, 0.5, 0, 0), nrow = 2, byrow =TRUE) my_effects <- matrix(0, nrow = 10, ncol = 2) my_effects[c(1, 5),1] <- c(-0.008, 0.01) my_effects[c(3, 6, 9), 2] <- c(-0.02, 0.06, 0.009) my_effects #>         [,1]   [,2] #>  [1,] -0.008  0.000 #>  [2,]  0.000  0.000 #>  [3,]  0.000 -0.020 #>  [4,]  0.000  0.000 #>  [5,]  0.010  0.000 #>  [6,]  0.000  0.060 #>  [7,]  0.000  0.000 #>  [8,]  0.000  0.000 #>  [9,]  0.000  0.009 #> [10,]  0.000  0.000 # for fun, lets include some sample overlap N <- matrix(c(40000, 10000, 10000, 20000), nrow = 2) sim_dat <- sim_mv_determined(N = N,                               direct_SNP_effects_joint = my_effects,                               geno_scale = \"sd\",                               pheno_sd = 1,                               G=G,                               est_s = TRUE) #> SNP effects provided for 10 SNPs and 2 traits.  sim_dat$direct_SNP_effects_joint #>         [,1]   [,2] #>  [1,] -0.008  0.000 #>  [2,]  0.000  0.000 #>  [3,]  0.000 -0.020 #>  [4,]  0.000  0.000 #>  [5,]  0.010  0.000 #>  [6,]  0.000  0.060 #>  [7,]  0.000  0.000 #>  [8,]  0.000  0.000 #>  [9,]  0.000  0.009 #> [10,]  0.000  0.000 sim_dat$beta_joint #>         [,1]   [,2] #>  [1,] -0.008 -0.004 #>  [2,]  0.000  0.000 #>  [3,]  0.000 -0.020 #>  [4,]  0.000  0.000 #>  [5,]  0.010  0.005 #>  [6,]  0.000  0.060 #>  [7,]  0.000  0.000 #>  [8,]  0.000  0.000 #>  [9,]  0.000  0.009 #> [10,]  0.000  0.000 sim_dat$Sigma_G #>          [,1]     [,2] #> [1,] 0.000164 0.000082 #> [2,] 0.000082 0.004122"},{"path":"/reference/xyz_to_G.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate G from XYZ Specification — xyz_to_G","title":"Generate G from XYZ Specification — xyz_to_G","text":"Generate G XYZ Specification","code":""},{"path":"/reference/xyz_to_G.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate G from XYZ Specification — xyz_to_G","text":"","code":"xyz_to_G(tau_xz, tau_yz, dir_xz, dir_yz, gamma)"},{"path":"/reference/xyz_to_G.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate G from XYZ Specification — xyz_to_G","text":"dir_xz, dir_yz Effect direction Z X Y (see details) gamma Signed variance Y explained X, see details taux_xz, tau_yz Effect size Z X Y signed percent variance explained (see details)","code":""},{"path":"/reference/xyz_to_G.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate G from XYZ Specification — xyz_to_G","text":"matrix direct effects corresponding variables order (Y, X, Z_1, ..., Z_K)","code":""},{"path":"/reference/xyz_to_G.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate G from XYZ Specification — xyz_to_G","text":"function generates matrix G direct effects corresponding model variables Y, X, Z_1, ..., Z_K. causal effect X Y given gamma, specifies proportion variance Y explained X. K variables Z_1, ..., Z_K can effects X Y direct effects . Vectors dir_xz dir_yz specify direction effects +1 corresponding \"\" effects -1 corresponding \"\" effects. example, dir_xz = c(1, -1) dir_yz = c(1, 1) indicate two variables Z_1 Z_2 Z_1 common cause X Y Z_2 cause $Y$ caused X (Z_2 mediator X Y). function give error index dir_xz equal -1 dir_yz equal 1. indicate variable mediator Y X, however, effect X Y assumed, resulting graph cyclic allowed. inputs `tau_xz` `tau_yz` specify effect sizes Z_k variables X $Y$. given signed percent variance explained. used dir_xz = c(1, -1) dir_yz = c(1, 1) tau_xz = c(0.2, -0.3) tau_yz = c(0.1, 0.25), means confounder, Z_1 explains 20% variance X 10% variance Y effects positive. X explains 30% variance mediate Z_2 negative effect direction Z_2 explains 25% variance Y.","code":""},{"path":"/reference/xyz_to_G.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate G from XYZ Specification — xyz_to_G","text":"","code":"xyz_to_G(tau_xz = c(0.2, -0.3), tau_yz = c(0.1, 0.25),         dir_xz = c(1, -1), dir_yz = c(1,1), gamma = 0) #>           [,1]      [,2] [,3]       [,4] #> [1,] 0.0000000 0.0000000    0  0.0000000 #> [2,] 0.0000000 0.0000000    0 -0.5477226 #> [3,] 0.3162278 0.4472136    0  0.0000000 #> [4,] 0.5000000 0.0000000    0  0.0000000 # code below will give an error due to specification of a cyclic graph. if (FALSE) { xyz_to_G(tau_xz = c(0.2), tau_yz = c(0.1),         dir_xz = c(1), dir_yz = c(-1), gamma = 0.1) } # with gamma = 0, there is no cycle so no error xyz_to_G(tau_xz = c(0.2), tau_yz = c(0.1),         dir_xz = c(1), dir_yz = c(-1), gamma = 0) #>      [,1]      [,2]      [,3] #> [1,]    0 0.0000000 0.3162278 #> [2,]    0 0.0000000 0.0000000 #> [3,]    0 0.4472136 0.0000000"}]
